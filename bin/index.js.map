{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils/logger.ts", "../src/utils/paths.ts", "../src/cli/commands/make.ts", "../src/core/services/MCPIntegrationService.ts", "../node_modules/zod/v3/external.js", "../node_modules/zod/v3/helpers/util.js", "../node_modules/zod/v3/ZodError.js", "../node_modules/zod/v3/locales/en.js", "../node_modules/zod/v3/errors.js", "../node_modules/zod/v3/helpers/parseUtil.js", "../node_modules/zod/v3/helpers/errorUtil.js", "../node_modules/zod/v3/types.js", "../src/core/types/index.ts", "../src/core/services/CodebaseAnalyzer.ts", "../src/core/services/RulesGenerator.ts", "../src/cli/commands/note.ts", "../src/cli/commands/run.ts", "../src/cli/ui/tornado.ts", "../src/utils/dependencies.ts", "../src/cli/commands/list.ts", "../src/cli/commands/join.ts", "../src/cli/commands/stop.ts", "../src/core/storage/SessionStore.ts", "../src/cli/commands/delete.ts", "../src/cli/commands/health.ts", "../src/cli/commands/interactive.ts", "../src/cli/commands/attach.ts", "../src/cli/commands/clean.ts"],
  "sourcesContent": ["#!/usr/bin/env node\r\n\r\nimport { Command } from 'commander'\r\nimport chalk from 'chalk'\r\nimport { getLogger } from './utils/logger'\r\nimport { MakeCommand } from './cli/commands/make'\r\nimport { NoteCommand } from './cli/commands/note'\r\nimport { RunCommand } from './cli/commands/run'\r\nimport { ListCommand } from './cli/commands/list'\r\nimport { JoinCommand } from './cli/commands/join'\r\nimport { StopCommand } from './cli/commands/stop'\r\nimport { DeleteCommand } from './cli/commands/delete'\r\nimport { HealthCommand } from './cli/commands/health'\r\nimport { InteractiveCommand } from './cli/commands/interactive'\r\nimport { CleanCommand } from './cli/commands/clean'\r\n\r\nconst logger = getLogger()\r\n\r\n// ASCII Art Tazz CLI Logo\r\nconst TAZZ_LOGO = `\r\n        .       *        .        *\r\n        .             .    *         .       .\r\n                   @@@\r\n                @@@@@@@\r\n              @@@@#^#@@@@\r\n                @@@@@@@\r\n                  @@@\r\n                   @@\r\n        ___@______________________\r\n .          *          .       *       .      .\r\n     *          .             *        .      *\r\n`\r\n\r\nasync function main() {\r\n  const program = new Command()\r\n\r\n  program\r\n    .name('tazz')\r\n    .description('\uD83C\uDF00 AI-powered development tool with git worktrees, tmux sessions, and MCP integration')\r\n    .version('1.0.0')\r\n    .configureHelp({\r\n      sortSubcommands: true,\r\n      subcommandTerm: (cmd) => cmd.name() + ' ' + cmd.usage()\r\n    })\r\n\r\n  // Global options\r\n  program\r\n    .option('-v, --verbose', 'Enable verbose logging')\r\n    .option('-q, --quiet', 'Suppress non-error output')\r\n    .option('--log-level <level>', 'Set log level (debug, info, warn, error)', 'info')\r\n\r\n  // Handle global options\r\n  program.hook('preAction', (thisCommand) => {\r\n    const options = thisCommand.opts()\r\n    \r\n    if (options.verbose) {\r\n      logger.setLevel('debug')\r\n    } else if (options.quiet) {\r\n      logger.setLevel('error')\r\n    } else if (options.logLevel) {\r\n      logger.setLevel(options.logLevel)\r\n    }\r\n  })\r\n\r\n  // Add commands\r\n  program.addCommand(new MakeCommand().build())\r\n  program.addCommand(new NoteCommand().build())\r\n  program.addCommand(new RunCommand().build())\r\n  program.addCommand(new ListCommand().build())\r\n  program.addCommand(new JoinCommand().build())\r\n  program.addCommand(new StopCommand().build())\r\n  program.addCommand(new DeleteCommand().build())\r\n  program.addCommand(new HealthCommand().build())\r\n  program.addCommand(new CleanCommand().build())\r\n\r\n  // Interactive mode (default when no command specified)\r\n  program\r\n    .command('interactive', { isDefault: false })\r\n    .alias('i')\r\n    .description('\uD83C\uDF00 Interactive Tazz CLI tool menu')\r\n    .action(async () => {\r\n      const interactiveCmd = new InteractiveCommand()\r\n      await interactiveCmd.execute()\r\n    })\r\n\r\n  // Custom help\r\n  program.on('--help', () => {\r\n    console.log('')\r\n    console.log(chalk.cyan('Examples:'))\r\n    console.log('  $ tazz                         Start interactive menu')\r\n    console.log('  $ tazz make                    Setup Tazz in current project')\r\n    console.log('  $ tazz note                    Edit tasks and prompts')\r\n    console.log('  $ tazz run feature-auth        Start development instance')\r\n    console.log('  $ tazz health                  Check system dependencies')\r\n    console.log('  $ tazz list                    Show all instances')\r\n    console.log('')\r\n    console.log(chalk.yellow('For more information, visit: https://github.com/tazz-dev/tazz-cli'))\r\n  })\r\n\r\n  // Error handling\r\n  program.exitOverride()\r\n\r\n  // If no arguments provided, start interactive mode\r\n  if (process.argv.length === 2) {\r\n    const interactiveCmd = new InteractiveCommand()\r\n    await interactiveCmd.execute()\r\n    return\r\n  }\r\n\r\n  try {\r\n    await program.parseAsync(process.argv)\r\n  } catch (error: any) {\r\n    if (error.code === 'commander.unknownCommand') {\r\n      console.log('')\r\n      console.log(chalk.red('\u274C Unknown command. Use --help to see available commands.'))\r\n      console.log('')\r\n      process.exit(1)\r\n    }\r\n\r\n    if (error.code === 'commander.help' || error.message === '(outputHelp)') {\r\n      // Help was displayed, exit normally\r\n      process.exit(0)\r\n    }\r\n\r\n    // Log unexpected errors\r\n    logger.error('Unexpected error occurred', error)\r\n    console.log('')\r\n    console.log(chalk.red('\u274C An unexpected error occurred. Check logs for details.'))\r\n    console.log(chalk.gray(`   Log file: /tmp/tazz-tmp/logs/tazz.log`))\r\n    process.exit(1)\r\n  }\r\n}\r\n\r\n// Handle uncaught errors gracefully\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n  logger.error('Unhandled Promise Rejection', reason as Error, {\r\n    promise: promise.toString()\r\n  })\r\n  console.log('')\r\n  console.log(chalk.red('\u274C An unexpected error occurred. Check logs for details.'))\r\n  process.exit(1)\r\n})\r\n\r\nprocess.on('uncaughtException', (error) => {\r\n  logger.error('Uncaught Exception', error)\r\n  console.log('')\r\n  console.log(chalk.red('\u274C A critical error occurred. Check logs for details.'))\r\n  process.exit(1)\r\n})\r\n\r\n// Show Tazz logo on direct execution\r\nif (require.main === module) {\r\n  console.log(chalk.cyan(TAZZ_LOGO))\r\n  console.log(chalk.bold.cyan('=== Tazz CLI Tool ==='))\r\n  console.log(chalk.gray('   AI-Powered Development Orchestrator'))\r\n  console.log('')\r\n}\r\n\r\n// Run main function\r\nif (require.main === module) {\r\n  main().catch((error) => {\r\n    logger.error('Main execution failed', error)\r\n    process.exit(1)\r\n  })\r\n}\r\n\r\nexport { main }\r\nexport * from './core/types'\r\nexport * from './core/services/MCPIntegrationService'\r\nexport * from './core/services/CodebaseAnalyzer'\r\nexport * from './core/services/RulesGenerator'", "import winston from 'winston'\r\nimport { getTazzLogPath } from './paths'\r\n\r\nexport interface LogContext {\r\n  sessionId?: string\r\n  agentId?: string\r\n  commandId?: string\r\n  userId?: string\r\n  [key: string]: unknown\r\n}\r\n\r\nexport interface LogEntry {\r\n  timestamp: string\r\n  level: string\r\n  message: string\r\n  context?: LogContext\r\n  pid: number\r\n}\r\n\r\nexport class Logger {\r\n  private winston: winston.Logger\r\n  private config: LoggerConfig\r\n\r\n  constructor(config: LoggerConfig = {}) {\r\n    this.config = {\r\n      level: 'info',\r\n      logFile: getTazzLogPath(),\r\n      enableConsole: true,\r\n      enableFile: true,\r\n      ...config\r\n    }\r\n\r\n    this.winston = winston.createLogger({\r\n      level: this.config.level,\r\n      format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.errors({ stack: true }),\r\n        winston.format.json()\r\n      ),\r\n      transports: this.createTransports()\r\n    })\r\n  }\r\n\r\n  private createTransports(): winston.transport[] {\r\n    const transports: winston.transport[] = []\r\n\r\n    if (this.config.enableConsole) {\r\n      transports.push(\r\n        new winston.transports.Console({\r\n          format: winston.format.combine(\r\n            winston.format.colorize(),\r\n            winston.format.simple(),\r\n            winston.format.printf(({ timestamp, level, message, ...meta }) => {\r\n              const metaStr = Object.keys(meta).length ? JSON.stringify(meta, null, 2) : ''\r\n              return `${timestamp} [${level}]: ${message} ${metaStr}`\r\n            })\r\n          )\r\n        })\r\n      )\r\n    }\r\n\r\n    if (this.config.enableFile) {\r\n      transports.push(\r\n        new winston.transports.File({\r\n          filename: this.config.logFile,\r\n          maxsize: 5242880, // 5MB\r\n          maxFiles: 5,\r\n          format: winston.format.combine(\r\n            winston.format.timestamp(),\r\n            winston.format.json()\r\n          )\r\n        })\r\n      )\r\n    }\r\n\r\n    return transports\r\n  }\r\n\r\n  error(message: string, error?: Error, context?: LogContext): void {\r\n    this.winston.error(message, {\r\n      error: error ? {\r\n        name: error.name,\r\n        message: error.message,\r\n        stack: error.stack\r\n      } : undefined,\r\n      ...context,\r\n      pid: process.pid\r\n    })\r\n  }\r\n\r\n  warn(message: string, context?: LogContext): void {\r\n    this.winston.warn(message, {\r\n      ...context,\r\n      pid: process.pid\r\n    })\r\n  }\r\n\r\n  info(message: string, context?: LogContext): void {\r\n    this.winston.info(message, {\r\n      ...context,\r\n      pid: process.pid\r\n    })\r\n  }\r\n\r\n  debug(message: string, context?: LogContext): void {\r\n    this.winston.debug(message, {\r\n      ...context,\r\n      pid: process.pid\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Create a child logger with persistent context\r\n   */\r\n  child(context: LogContext): Logger {\r\n    const childLogger = new Logger(this.config)\r\n    \r\n    // Override the winston logger to include persistent context\r\n    const originalWinston = childLogger.winston\r\n    childLogger.winston = originalWinston.child(context)\r\n    \r\n    return childLogger\r\n  }\r\n\r\n  /**\r\n   * Set log level dynamically\r\n   */\r\n  setLevel(level: string): void {\r\n    this.winston.level = level\r\n    this.config.level = level\r\n  }\r\n\r\n  /**\r\n   * Get current log level\r\n   */\r\n  getLevel(): string {\r\n    return this.config.level\r\n  }\r\n}\r\n\r\nexport interface LoggerConfig {\r\n  level?: string\r\n  logFile?: string\r\n  enableConsole?: boolean\r\n  enableFile?: boolean\r\n}\r\n\r\n// Default logger instance\r\nlet defaultLogger: Logger | null = null\r\n\r\nexport function getLogger(config?: LoggerConfig): Logger {\r\n  if (!defaultLogger) {\r\n    defaultLogger = new Logger(config)\r\n  }\r\n  return defaultLogger\r\n}\r\n\r\nexport function createLogger(config?: LoggerConfig): Logger {\r\n  return new Logger(config)\r\n}", "import { join } from 'path'\r\nimport { homedir } from 'os'\r\n\r\n/**\r\n * Get the centralized Tazz directory path\r\n * This is where all Tazz configurations, sessions, and data are stored\r\n */\r\nexport function getTazzDir(): string {\r\n  return '/tmp/tazz-tmp'\r\n}\r\n\r\n/**\r\n * Get the logs directory path\r\n */\r\nexport function getLogsDir(): string {\r\n  return join(getTazzDir(), 'logs')\r\n}\r\n\r\n/**\r\n * Get the sessions directory path\r\n */\r\nexport function getSessionsDir(): string {\r\n  return join(getTazzDir(), 'sessions')\r\n}\r\n\r\n/**\r\n * Get the global config directory path\r\n */\r\nexport function getConfigDir(): string {\r\n  return join(getTazzDir(), 'config')\r\n}\r\n\r\n/**\r\n * Get path for a specific project's tazz data\r\n */\r\nexport function getProjectTazzDir(projectPath: string): string {\r\n  // Create a safe project name from the path\r\n  const projectName = projectPath\r\n    .replace(/[^a-zA-Z0-9]/g, '_')\r\n    .replace(/_+/g, '_')\r\n    .replace(/^_|_$/g, '')\r\n  \r\n  return join(getTazzDir(), 'projects', projectName)\r\n}\r\n\r\n/**\r\n * Get the main tazz log file path\r\n */\r\nexport function getTazzLogPath(): string {\r\n  return join(getLogsDir(), 'tazz.log')\r\n}\r\n\r\n/**\r\n * Get global sessions file path\r\n */\r\nexport function getGlobalSessionsPath(): string {\r\n  return join(getTazzDir(), 'sessions.json')\r\n}", "import { Command } from 'commander'\r\nimport chalk from 'chalk'\r\nimport ora from 'ora'\r\nimport { ensureDir, writeFile, pathExists, readFile, copy } from 'fs-extra'\r\nimport { join, dirname } from 'path'\r\nimport { MCPIntegrationService } from '../../core/services/MCPIntegrationService'\r\nimport { CodebaseAnalyzer } from '../../core/services/CodebaseAnalyzer'\r\nimport { IntelligentRulesGenerator } from '../../core/services/RulesGenerator'\r\nimport { getLogger } from '../../utils/logger'\r\nimport { getTazzDir, getProjectTazzDir } from '../../utils/paths'\r\nimport { TazzError } from '../../core/types'\r\n\r\nexport class MakeCommand {\r\n  private logger = getLogger()\r\n\r\n  build(): Command {\r\n    return new Command('make')\r\n      .description('\uD83C\uDFD7\uFE0F  Make/setup Tazz with intelligent codebase analysis and MCP integration')\r\n      .action(async () => {\r\n        await this.execute()\r\n      })\r\n  }\r\n\r\n  async execute(): Promise<void> {\r\n    console.log('')\r\n    console.log(chalk.bold.cyan('\uD83C\uDF00 Starting Tazz Initialization'))\r\n    console.log(chalk.gray('Setting up intelligent development environment...'))\r\n    console.log('')\r\n\r\n    try {\r\n      // Check if already initialized\r\n      if (await this.checkExistingInstallation()) {\r\n        console.log(chalk.yellow('\u26A0\uFE0F  Tazz is already initialized in this project'))\r\n        return\r\n      }\r\n\r\n      const projectPath = process.cwd()\r\n      \r\n      // Phase 1: Infrastructure Setup\r\n      await this.setupInfrastructure(projectPath)\r\n\r\n      // Phase 2: MCP Integration\r\n      const mcpService = await this.setupMCPIntegration(projectPath)\r\n\r\n      // Phase 3: Codebase Analysis\r\n      const analysis = await this.analyzeCodebase(projectPath, mcpService)\r\n\r\n      // Phase 4: Generate Rules and Hooks\r\n      if (analysis) {\r\n        await this.generateIntelligentRules(projectPath, analysis)\r\n        await this.generateHookScripts(projectPath, analysis)\r\n      }\r\n\r\n      // Phase 5: Setup Testing Strategy\r\n      if (analysis) {\r\n        await this.setupTestingStrategy(projectPath, analysis)\r\n      }\r\n\r\n      // Phase 6: Create Configuration\r\n      await this.createConfiguration(projectPath, {\r\n        mcpService,\r\n        analysis\r\n      })\r\n\r\n      // Phase 7: Update .gitignore\r\n      await this.updateGitignore(projectPath)\r\n\r\n      console.log('')\r\n      console.log(chalk.green('\u2705 Tazz initialization completed successfully!'))\r\n      console.log('')\r\n      console.log(chalk.bold('Next steps:'))\r\n      console.log(chalk.gray('  \u2022 Run'), chalk.cyan('tazz start <ticket-id>'), chalk.gray('to create a new session'))\r\n      console.log(chalk.gray('  \u2022 Run'), chalk.cyan('tazz -d'), chalk.gray('to open detached console mode'))\r\n      console.log(chalk.gray('  \u2022 Run'), chalk.cyan('tazz list'), chalk.gray('to see all sessions'))\r\n      console.log('')\r\n\r\n    } catch (error) {\r\n      this.logger.error('Initialization failed', error)\r\n      console.log('')\r\n      console.log(chalk.red('\u274C Tazz initialization failed'))\r\n      \r\n      if (error instanceof TazzError) {\r\n        console.log(chalk.red(`   ${error.message}`))\r\n      } else {\r\n        console.log(chalk.red('   An unexpected error occurred'))\r\n        console.log(chalk.gray('   Check logs for details: ~/.tazz/logs/tazz.log'))\r\n      }\r\n      \r\n      process.exit(1)\r\n    }\r\n  }\r\n\r\n  private async checkExistingInstallation(): Promise<boolean> {\r\n    const projectPath = process.cwd()\r\n    // Check for local .tazz or .claude directories (user collaboration files)\r\n    const hasTazz = await pathExists(join(projectPath, '.tazz'))\r\n    const hasClaude = await pathExists(join(projectPath, '.claude'))\r\n    return hasTazz || hasClaude\r\n  }\r\n\r\n  private async setupInfrastructure(projectPath: string): Promise<void> {\r\n    const spinner = ora('Setting up Tazz infrastructure').start()\r\n\r\n    try {\r\n      // Create centralized Tazz directory structure\r\n      const globalTazzDir = getTazzDir()\r\n      const projectTazzDir = getProjectTazzDir(projectPath)\r\n      \r\n      const directories = [\r\n        // Global directories\r\n        join(globalTazzDir, 'logs'),\r\n        join(globalTazzDir, 'sessions'),\r\n        join(globalTazzDir, 'config'),\r\n        join(globalTazzDir, 'projects'),\r\n        // Project-specific directories in centralized location\r\n        projectTazzDir,\r\n        join(projectTazzDir, 'rules'),\r\n        join(projectTazzDir, 'hooks'),\r\n        join(projectTazzDir, 'analysis'),\r\n        join(projectTazzDir, 'templates'),\r\n        // Minimal local directories for user collaboration\r\n        join(projectPath, '.tazz'),\r\n        join(projectPath, '.claude')\r\n      ]\r\n\r\n      await Promise.all(\r\n        directories.map(dir => ensureDir(dir))\r\n      )\r\n\r\n      // Create initial project config files\r\n      const projectName = (() => {\r\n        try {\r\n          return require(join(projectPath, 'package.json')).name || 'unknown'\r\n        } catch {\r\n          return 'unknown'\r\n        }\r\n      })()\r\n\r\n      const initialFiles = {\r\n        // Centralized files\r\n        [join(projectTazzDir, 'sessions.json')]: JSON.stringify({ sessions: [] }, null, 2),\r\n        [join(projectTazzDir, 'config.json')]: JSON.stringify({\r\n          version: '1.0.0',\r\n          initialized: new Date().toISOString(),\r\n          project: {\r\n            name: projectName,\r\n            path: projectPath,\r\n            type: 'library'\r\n          },\r\n          features: {\r\n            mcpIntegration: false,\r\n            codebaseAnalysis: true,\r\n            intelligentRules: true,\r\n            hooksIntegration: true\r\n          },\r\n          settings: {\r\n            maxConcurrentSessions: 10,\r\n            defaultBranch: 'main',\r\n            tmuxPrefix: 'tazz_',\r\n            agentTimeout: 300000,\r\n            logLevel: 'info',\r\n            autoCommit: false,\r\n            qualityGates: {\r\n              enabled: false,\r\n              coverage: 80\r\n            }\r\n          },\r\n          connectedServices: {\r\n            mcp: [],\r\n            git: true,\r\n            tmux: true\r\n          }\r\n        }, null, 2),\r\n        // Local file for user collaboration\r\n        [join(projectPath, '.tazz', 'tazz-todo.md')]: this.createInitialTodoTemplate()\r\n      }\r\n\r\n      await Promise.all(\r\n        Object.entries(initialFiles).map(([file, content]) =>\r\n          writeFile(file, content)\r\n        )\r\n      )\r\n\r\n      // Copy complete .claude configuration from tazz-cli template\r\n      await this.copyClaudeTemplate(projectPath)\r\n\r\n      spinner.succeed('Infrastructure setup complete')\r\n    } catch (error) {\r\n      spinner.fail('Infrastructure setup failed')\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private createInitialTodoTemplate(): string {\r\n    return `# Tazz Task Template\r\n\r\n## Session Tasks\r\n- [ ] Task 1: Complete implementation\r\n      Session name: task-1\r\n      Description: \r\n        Implement the main functionality for this feature. This context will be passed to the Claude instance in the tmux session.\r\n\r\n- [ ] Task 2: Write tests\r\n      Session name: task-2\r\n      Description: \r\n        Create comprehensive tests for the implemented functionality. Focus on unit tests and integration tests.\r\n\r\n- [ ] Task 3: Update documentation\r\n      Session name: task-3\r\n      Description: \r\n        Update relevant documentation including README, API docs, and inline comments.\r\n\r\n- [ ] Task 4: Code review preparation\r\n      Session name: task-4\r\n      Description: \r\n        Prepare code for review, run linting, fix any issues, and ensure quality standards are met.\r\n\r\n## In Progress\r\n- [ ] Current task being worked on...\r\n      Session name: current-task\r\n      Description: \r\n        Description of what is currently being implemented or debugged.\r\n\r\n## Quality Checklist\r\n- [ ] Code follows project patterns\r\n- [ ] Tests pass locally\r\n- [ ] Coverage meets threshold\r\n- [ ] Code reviewed\r\n- [ ] Documentation updated\r\n\r\n## Session Notes\r\nAdd notes about current session, decisions made, next steps...\r\n\r\n## Quick Commands\r\n\\`\\`\\`bash\r\n# Run all tasks (creates separate tmux sessions)\r\ntazz run instance-name\r\n\r\n# Join specific task session\r\ntazz join instance-name task-1\r\n\r\n# List all active sessions\r\ntazz list\r\n\r\n# Join main instance session\r\ntazz join instance-name\r\n\\`\\`\\`\r\n`\r\n  }\r\n\r\n  private async copyClaudeTemplate(projectPath: string): Promise<void> {\r\n    try {\r\n      // Get the path to the Tazz CLI's template directory\r\n      const tazzCliDir = dirname(__dirname)\r\n      const templateDir = join(tazzCliDir, 'templates', 'claude-template')\r\n      \r\n      // Copy the entire Claude template to the project\r\n      const projectClaudeDir = join(projectPath, '.claude')\r\n      \r\n      if (await pathExists(templateDir)) {\r\n        await copy(templateDir, projectClaudeDir, { overwrite: true })\r\n        \r\n        // Update the settings.json to point to the correct project-specific paths\r\n        await this.updateClaudeSettings(projectPath, projectClaudeDir)\r\n        \r\n        this.logger.info('Claude configuration copied from template', { templateDir, projectClaudeDir })\r\n      } else {\r\n        this.logger.warn('Claude template not found', { templateDir })\r\n        throw new Error(`Claude template not found at ${templateDir}`)\r\n      }\r\n    } catch (error) {\r\n      this.logger.error('Failed to copy Claude template', { error: error.message })\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async updateClaudeSettings(projectPath: string, projectClaudeDir: string): Promise<void> {\r\n    const projectTazzDir = getProjectTazzDir(projectPath)\r\n    const settingsPath = join(projectClaudeDir, 'settings.json')\r\n    \r\n    if (await pathExists(settingsPath)) {\r\n      const settings = JSON.parse(await readFile(settingsPath, 'utf-8'))\r\n      \r\n      // Update git repository path to current project\r\n      if (settings.mcpServers?.git) {\r\n        settings.mcpServers.git.args = [\r\n          \"mcp-server-git\",\r\n          \"--repository\", \r\n          projectPath\r\n        ]\r\n      }\r\n      \r\n      // Update hook script paths to centralized location\r\n      if (settings.hooks) {\r\n        Object.keys(settings.hooks).forEach(hookName => {\r\n          if (settings.hooks[hookName].script) {\r\n            const scriptName = settings.hooks[hookName].script.split('/').pop()\r\n            settings.hooks[hookName].script = join(projectTazzDir, 'hooks', scriptName)\r\n          }\r\n        })\r\n      }\r\n      \r\n      await writeFile(settingsPath, JSON.stringify(settings, null, 2))\r\n    }\r\n  }\r\n\r\n  private async setupMCPIntegration(projectPath: string): Promise<MCPIntegrationService | null> {\r\n    const spinner = ora('Detecting and configuring MCP servers').start()\r\n\r\n    try {\r\n      const mcpService = new MCPIntegrationService(this.logger)\r\n      const mcpConfig = await mcpService.detectAndSetupMCPs()\r\n      \r\n      // Setup project-specific configuration\r\n      await mcpService.setupProjectSpecific(projectPath)\r\n\r\n      const connectedServers = mcpService.getConnectedServers()\r\n      \r\n      spinner.succeed(`MCP integration complete (${connectedServers.length} servers connected)`)\r\n      \r\n      if (connectedServers.length > 0) {\r\n        console.log(chalk.gray('    Connected servers:'), chalk.cyan(connectedServers.join(', ')))\r\n      }\r\n\r\n      return mcpService\r\n    } catch (error) {\r\n      spinner.warn('MCP integration failed, continuing without MCP features')\r\n      this.logger.warn('MCP integration failed', { error: error.message })\r\n      return null\r\n    }\r\n  }\r\n\r\n  private async analyzeCodebase(projectPath: string, mcpService: MCPIntegrationService | null): Promise<any> {\r\n    const spinner = ora('Analyzing codebase structure and patterns').start()\r\n\r\n    try {\r\n      const analyzer = new CodebaseAnalyzer(\r\n        mcpService || new MCPIntegrationService(this.logger),\r\n        this.logger,\r\n        projectPath\r\n      )\r\n      \r\n      const analysis = await analyzer.analyzeProject()\r\n      \r\n      spinner.succeed('Codebase analysis complete')\r\n      console.log(chalk.gray('    Project type:'), chalk.cyan(analysis.structure.type))\r\n      console.log(chalk.gray('    Language:'), chalk.cyan(analysis.technologies.language))\r\n      if (analysis.technologies.framework) {\r\n        console.log(chalk.gray('    Framework:'), chalk.cyan(analysis.technologies.framework))\r\n      }\r\n      console.log(chalk.gray('    Has tests:'), analysis.testingStrategy.hasTests ? chalk.green('Yes') : chalk.yellow('No'))\r\n\r\n      return analysis\r\n    } catch (error) {\r\n      spinner.fail('Codebase analysis failed')\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async generateIntelligentRules(projectPath: string, analysis: any): Promise<void> {\r\n    const spinner = ora('Generating intelligent rules and patterns').start()\r\n\r\n    try {\r\n      const rulesGenerator = new IntelligentRulesGenerator(this.logger, projectPath)\r\n      await rulesGenerator.generateProjectRules(analysis)\r\n      \r\n      spinner.succeed('Rules generation complete')\r\n      console.log(chalk.gray('    Generated rules for:'), chalk.cyan(analysis.technologies.language))\r\n    } catch (error) {\r\n      spinner.fail('Rules generation failed')\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async generateHookScripts(projectPath: string, analysis: any): Promise<void> {\r\n    const spinner = ora('Setting up Claude Code hooks integration').start()\r\n\r\n    try {\r\n      const rulesGenerator = new IntelligentRulesGenerator(this.logger, projectPath)\r\n      await rulesGenerator.generateHookScripts(analysis)\r\n      \r\n      // Create sub-agent configurations (Claude config already copied in infrastructure setup)\r\n      await this.createSubAgentConfigs(projectPath, analysis)\r\n      \r\n      spinner.succeed('Hook scripts generated')\r\n      console.log(chalk.gray('    Created Claude Code integration hooks'))\r\n    } catch (error) {\r\n      spinner.fail('Hook generation failed')\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async createClaudeHooksConfig(projectPath: string): Promise<void> {\r\n    const projectTazzDir = getProjectTazzDir(projectPath)\r\n    \r\n    // Get the path to the Tazz CLI's template directory\r\n    // Since we're in dist/index.js, go up one level to find templates\r\n    const tazzCliDir = dirname(__dirname)\r\n    const templateDir = join(tazzCliDir, 'templates', 'claude-template')\r\n    \r\n    // Copy the entire Claude template to the project\r\n    const projectClaudeDir = join(projectPath, '.claude')\r\n    \r\n    if (await pathExists(templateDir)) {\r\n      await copy(templateDir, projectClaudeDir, { overwrite: true })\r\n      \r\n      // Update the settings.json to point to the correct project-specific paths\r\n      const settingsPath = join(projectClaudeDir, 'settings.json')\r\n      if (await pathExists(settingsPath)) {\r\n        const settings = JSON.parse(await readFile(settingsPath, 'utf-8'))\r\n        \r\n        // Update git repository path to current project\r\n        if (settings.mcpServers?.git) {\r\n          settings.mcpServers.git.args = [\r\n            \"mcp-server-git\",\r\n            \"--repository\", \r\n            projectPath\r\n          ]\r\n        }\r\n        \r\n        // Update hook script paths to centralized location\r\n        if (settings.hooks) {\r\n          Object.keys(settings.hooks).forEach(hookName => {\r\n            if (settings.hooks[hookName].script) {\r\n              const scriptName = settings.hooks[hookName].script.split('/').pop()\r\n              settings.hooks[hookName].script = join(projectTazzDir, 'hooks', scriptName)\r\n            }\r\n          })\r\n        }\r\n        \r\n        // Update sub-agent paths to centralized location\r\n        if (settings.subAgents) {\r\n          Object.keys(settings.subAgents).forEach(agentName => {\r\n            const agent = settings.subAgents[agentName]\r\n            if (agent.rules) {\r\n              const rulesFile = agent.rules.split('/').pop()\r\n              agent.rules = join(projectTazzDir, 'rules', rulesFile)\r\n            }\r\n            if (agent.templates) {\r\n              agent.templates = join(projectTazzDir, 'templates/')\r\n            }\r\n            if (agent.analysis) {\r\n              agent.analysis = join(projectTazzDir, 'analysis.json')\r\n            }\r\n          })\r\n        }\r\n        \r\n        await writeFile(settingsPath, JSON.stringify(settings, null, 2))\r\n      }\r\n      \r\n      this.logger.info('Claude configuration copied from template', { templateDir, projectClaudeDir })\r\n    } else {\r\n      this.logger.warn('Claude template not found', { templateDir })\r\n      throw new Error(`Claude template not found at ${templateDir}`)\r\n    }\r\n  }\r\n\r\n  private async createSubAgentConfigs(projectPath: string, analysis: any): Promise<void> {\r\n    const projectTazzDir = getProjectTazzDir(projectPath)\r\n    const subAgentsDir = join(projectTazzDir, 'subagents')\r\n    await ensureDir(subAgentsDir)\r\n\r\n    // Create detailed configuration for each sub-agent\r\n    const subAgentConfigs = {\r\n      'testing-agent.json': {\r\n        name: \"Testing Specialist\",\r\n        role: \"Test automation and quality assurance expert\",\r\n        expertise: [\r\n          \"Unit testing patterns\",\r\n          \"Integration test strategies\", \r\n          \"E2E automation with Playwright\",\r\n          \"Test coverage optimization\",\r\n          \"Performance testing\",\r\n          \"CI/CD test pipeline integration\"\r\n        ],\r\n        tools: {\r\n          primary: [\"Write\", \"Edit\", \"Bash\"],\r\n          mcp: [\"playwright\", \"github\", \"sonarcloud\"],\r\n          testing: [\"jest\", \"vitest\", \"cypress\", \"playwright\"]\r\n        },\r\n        workflows: {\r\n          \"create-unit-tests\": {\r\n            steps: [\"Analyze code\", \"Generate test structure\", \"Implement assertions\", \"Verify coverage\"],\r\n            templates: join(projectTazzDir, 'templates/unit-test.template')\r\n          },\r\n          \"setup-e2e-tests\": {\r\n            steps: [\"Design user flows\", \"Create page objects\", \"Implement scenarios\", \"Configure CI\"],\r\n            templates: join(projectTazzDir, 'templates/integration-test.template')\r\n          }\r\n        },\r\n        language: analysis.technologies.language,\r\n        framework: analysis.technologies.framework,\r\n        testingStrategy: analysis.testingStrategy\r\n      },\r\n\r\n      'architecture-agent.json': {\r\n        name: \"Architecture Analyst\", \r\n        role: \"System design and code structure expert\",\r\n        expertise: [\r\n          \"Design pattern analysis\",\r\n          \"Code architecture assessment\",\r\n          \"Technical debt identification\",\r\n          \"Performance optimization\",\r\n          \"Security analysis\",\r\n          \"Refactoring strategies\"\r\n        ],\r\n        tools: {\r\n          primary: [\"Read\", \"Glob\", \"Grep\"],\r\n          mcp: [\"sonarcloud\", \"context7\", \"github\"],\r\n          analysis: [\"ast-parser\", \"complexity-analyzer\"]\r\n        },\r\n        workflows: {\r\n          \"analyze-architecture\": {\r\n            steps: [\"Code structure mapping\", \"Pattern identification\", \"Dependency analysis\", \"Quality metrics\"],\r\n            analysis: join(projectTazzDir, 'analysis.json')\r\n          },\r\n          \"refactor-recommendations\": {\r\n            steps: [\"Technical debt assessment\", \"Performance bottlenecks\", \"Security vulnerabilities\", \"Improvement plan\"],\r\n            rules: join(projectTazzDir, 'rules/code-style.json')\r\n          }\r\n        },\r\n        projectType: analysis.projectType,\r\n        technologies: analysis.technologies,\r\n        structure: analysis.structure\r\n      },\r\n\r\n      'devops-agent.json': {\r\n        name: \"DevOps Engineer\",\r\n        role: \"CI/CD and infrastructure automation specialist\", \r\n        expertise: [\r\n          \"CI/CD pipeline optimization\",\r\n          \"Docker containerization\",\r\n          \"Build automation\",\r\n          \"Quality gate enforcement\",\r\n          \"Deployment strategies\",\r\n          \"Infrastructure as code\"\r\n        ],\r\n        tools: {\r\n          primary: [\"Bash\", \"Write\", \"Edit\"],\r\n          mcp: [\"github\", \"sonarcloud\"],\r\n          devops: [\"docker\", \"kubernetes\", \"terraform\"]\r\n        },\r\n        workflows: {\r\n          \"setup-ci-pipeline\": {\r\n            steps: [\"Analyze build process\", \"Configure workflows\", \"Setup quality gates\", \"Deploy automation\"],\r\n            rules: join(projectTazzDir, 'rules/git-workflow.json')\r\n          },\r\n          \"containerize-application\": {\r\n            steps: [\"Create Dockerfile\", \"Optimize layers\", \"Configure compose\", \"Setup healthchecks\"]\r\n          }\r\n        },\r\n        technologies: analysis.technologies,\r\n        buildTools: analysis.buildTools\r\n      }\r\n    }\r\n\r\n    // Write sub-agent configuration files\r\n    await Promise.all(\r\n      Object.entries(subAgentConfigs).map(([filename, config]) =>\r\n        writeFile(join(subAgentsDir, filename), JSON.stringify(config, null, 2))\r\n      )\r\n    )\r\n\r\n    this.logger.info('Sub-agent configurations created', { subAgentsDir })\r\n  }\r\n\r\n  private async setupTestingStrategy(projectPath: string, analysis: any): Promise<void> {\r\n    const spinner = ora('Setting up testing strategy').start()\r\n\r\n    try {\r\n      // Create test templates based on analysis in centralized location\r\n      const projectTazzDir = getProjectTazzDir(projectPath)\r\n      const templatesDir = join(projectTazzDir, 'templates')\r\n      \r\n      const testTemplates = {\r\n        'unit-test.template': this.createUnitTestTemplate(analysis),\r\n        'integration-test.template': analysis.structure.hasAPI ? this.createIntegrationTestTemplate(analysis) : null,\r\n        'e2e-test.template': analysis.structure.hasFrontend ? this.createE2ETestTemplate(analysis) : null\r\n      }\r\n\r\n      await Promise.all(\r\n        Object.entries(testTemplates)\r\n          .filter(([, content]) => content !== null)\r\n          .map(([filename, content]) =>\r\n            writeFile(join(templatesDir, filename), content!)\r\n          )\r\n      )\r\n\r\n      spinner.succeed('Testing strategy configured')\r\n    } catch (error) {\r\n      spinner.fail('Testing strategy setup failed')\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private createUnitTestTemplate(analysis: any): string {\r\n    const language = analysis.technologies.language\r\n    const framework = analysis.testingStrategy.framework\r\n\r\n    if (language === 'typescript' || language === 'javascript') {\r\n      return `import { describe, it, expect } from '${framework || 'vitest'}'\r\nimport { {{COMPONENT_NAME}} } from '../src/{{COMPONENT_PATH}}'\r\n\r\ndescribe('{{COMPONENT_NAME}}', () => {\r\n  it('should {{TEST_DESCRIPTION}}', () => {\r\n    // Arrange\r\n    const input = {{TEST_INPUT}}\r\n\r\n    // Act\r\n    const result = {{COMPONENT_NAME}}(input)\r\n\r\n    // Assert\r\n    expect(result).{{ASSERTION}}\r\n  })\r\n})`\r\n    }\r\n\r\n    return `// Unit test template for {{COMPONENT_NAME}}\r\n// Add your test cases here`\r\n  }\r\n\r\n  private createIntegrationTestTemplate(analysis: any): string {\r\n    return `// Integration test template for API endpoints\r\nimport request from 'supertest'\r\nimport app from '../src/app'\r\n\r\ndescribe('{{API_ENDPOINT}}', () => {\r\n  beforeEach(async () => {\r\n    // Setup test database\r\n  })\r\n\r\n  it('should {{ENDPOINT_BEHAVIOR}}', async () => {\r\n    const response = await request(app)\r\n      .{{HTTP_METHOD}}('{{ENDPOINT_PATH}}')\r\n      .send({{REQUEST_BODY}})\r\n      .expect({{EXPECTED_STATUS}})\r\n\r\n    expect(response.body).toMatchObject({{EXPECTED_RESPONSE}})\r\n  })\r\n})`\r\n  }\r\n\r\n  private createE2ETestTemplate(analysis: any): string {\r\n    const hasPlaywright = analysis.testingStrategy.e2e?.framework === 'playwright'\r\n\r\n    if (hasPlaywright) {\r\n      return `import { test, expect } from '@playwright/test'\r\n\r\ntest.describe('{{FEATURE_NAME}}', () => {\r\n  test('should {{TEST_DESCRIPTION}}', async ({ page }) => {\r\n    await page.goto('${analysis.structure.baseURL || 'http://localhost:3000'}')\r\n    \r\n    // Test user workflow\r\n    await page.click('{{SELECTOR}}')\r\n    await page.fill('input[name=\"{{INPUT_NAME}}\"]', '{{TEST_VALUE}}')\r\n    \r\n    await expect(page.locator('{{RESULT_SELECTOR}}')).toHaveText('{{EXPECTED_TEXT}}')\r\n  })\r\n})`\r\n    }\r\n\r\n    return `// E2E test template\r\ndescribe('{{FEATURE_NAME}}', () => {\r\n  it('should complete user workflow', () => {\r\n    // Add E2E test steps\r\n  })\r\n})`\r\n  }\r\n\r\n  private async createConfiguration(projectPath: string, context: {\r\n    mcpService: MCPIntegrationService | null\r\n    analysis: any\r\n  }): Promise<void> {\r\n    const config = {\r\n      version: '1.0.0',\r\n      initialized: new Date().toISOString(),\r\n      project: {\r\n        name: this.getProjectName(projectPath),\r\n        path: projectPath,\r\n        type: context.analysis?.structure.type || 'unknown'\r\n      },\r\n      features: {\r\n        mcpIntegration: context.mcpService !== null,\r\n        codebaseAnalysis: context.analysis !== null,\r\n        intelligentRules: context.analysis !== null,\r\n        hooksIntegration: context.analysis !== null\r\n      },\r\n      settings: {\r\n        maxConcurrentSessions: 10,\r\n        defaultBranch: 'main',\r\n        tmuxPrefix: 'tazz_',\r\n        agentTimeout: 300000,\r\n        logLevel: 'info',\r\n        autoCommit: false,\r\n        qualityGates: {\r\n          enabled: context.analysis?.quality.hasQualityGates || false,\r\n          coverage: context.analysis?.quality.coverageThreshold || 80\r\n        }\r\n      },\r\n      connectedServices: {\r\n        mcp: context.mcpService?.getConnectedServers() || [],\r\n        git: true,\r\n        tmux: true\r\n      }\r\n    }\r\n\r\n    // Store configuration only in centralized location (already done in setupInfrastructure)\r\n    const projectTazzDir = getProjectTazzDir(projectPath)\r\n    await writeFile(\r\n      join(projectTazzDir, 'config.json'),\r\n      JSON.stringify(config, null, 2)\r\n    )\r\n  }\r\n\r\n  private getProjectName(projectPath: string): string {\r\n    try {\r\n      const packageJson = require(join(projectPath, 'package.json'))\r\n      return packageJson.name\r\n    } catch {\r\n      return require('path').basename(projectPath)\r\n    }\r\n  }\r\n\r\n  private async updateGitignore(projectPath: string): Promise<void> {\r\n    const gitignorePath = join(projectPath, '.gitignore')\r\n    const tazzEntries = [\r\n      '',\r\n      '# Tazz CLI',\r\n      '.tazz/',\r\n      '.claude/',\r\n      ''\r\n    ].join('\\n')\r\n\r\n    try {\r\n      if (await pathExists(gitignorePath)) {\r\n        const existing = await readFile(gitignorePath, 'utf-8')\r\n        if (!existing.includes('.tazz/')) {\r\n          await writeFile(gitignorePath, existing + tazzEntries)\r\n        }\r\n      } else {\r\n        await writeFile(gitignorePath, tazzEntries)\r\n      }\r\n    } catch (error) {\r\n      this.logger.warn('Could not update .gitignore', { error: error.message })\r\n    }\r\n  }\r\n}", "import { readFile, writeFile as fsWriteFile, ensureFile } from 'fs-extra'\r\nimport { join } from 'path'\r\nimport { homedir } from 'os'\r\nimport { execa } from 'execa'\r\nimport { z } from 'zod'\r\nimport { Logger } from '../../utils/logger'\r\nimport { MCPServer, MCPConfiguration, MCPError, CommandResult } from '../types'\r\n\r\n// Zod schemas for validation\r\nconst MCPServerSchema = z.object({\r\n  command: z.string(),\r\n  args: z.array(z.string()),\r\n  env: z.record(z.string()).optional().default({}),\r\n  autoApprove: z.array(z.string()).optional().default([]),\r\n  disabled: z.boolean().optional().default(false),\r\n  timeout: z.number().optional().default(60),\r\n  transportType: z.enum(['stdio', 'sse']).optional().default('stdio')\r\n})\r\n\r\nconst ClaudeConfigSchema = z.object({\r\n  mcpServers: z.record(MCPServerSchema).optional().default({}),\r\n  globalShortcuts: z.object({\r\n    toggle: z.string().optional()\r\n  }).optional(),\r\n  statusLine: z.object({\r\n    enabled: z.boolean().optional(),\r\n    position: z.enum(['left', 'right']).optional()\r\n  }).optional()\r\n})\r\n\r\nexport class MCPIntegrationService {\r\n  private logger: Logger\r\n  private mcpConfig: MCPConfiguration | null = null\r\n  private connectedServers: Map<string, MCPServer> = new Map()\r\n\r\n  constructor(logger: Logger) {\r\n    this.logger = logger\r\n  }\r\n\r\n  /**\r\n   * Detect and load MCP configuration from Claude Code settings\r\n   */\r\n  async detectAndSetupMCPs(): Promise<MCPConfiguration> {\r\n    this.logger.info('Detecting MCP servers from Claude Code configuration')\r\n\r\n    try {\r\n      const claudeConfig = await this.readClaudeConfig()\r\n      const relevantMCPs = this.filterRelevantMCPs(claudeConfig.mcpServers)\r\n      \r\n      this.mcpConfig = this.categorizeServers(relevantMCPs)\r\n      \r\n      // Test connections to available servers\r\n      await this.testConnections()\r\n      \r\n      this.logger.info('MCP configuration loaded successfully', {\r\n        serversFound: Object.keys(relevantMCPs).length,\r\n        serversActive: this.connectedServers.size\r\n      })\r\n\r\n      return this.mcpConfig\r\n    } catch (error) {\r\n      this.logger.error('Failed to setup MCP integration', error)\r\n      throw new MCPError('MCP setup failed', { error: error.message }, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read Claude Code configuration from multiple possible locations\r\n   */\r\n  private async readClaudeConfig(): Promise<any> {\r\n    const possiblePaths = [\r\n      join(homedir(), '.claude', 'settings.json'),\r\n      join(process.cwd(), '.claude', 'settings.json'),\r\n      join(homedir(), '.config', 'claude', 'settings.json')\r\n    ]\r\n\r\n    for (const configPath of possiblePaths) {\r\n      try {\r\n        const configContent = await readFile(configPath, 'utf-8')\r\n        const rawConfig = JSON.parse(configContent)\r\n        return ClaudeConfigSchema.parse(rawConfig)\r\n      } catch (error) {\r\n        this.logger.debug(`Claude config not found at ${configPath}`)\r\n        continue\r\n      }\r\n    }\r\n\r\n    throw new MCPError('No Claude Code configuration found', {\r\n      searchPaths: possiblePaths\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Filter MCP servers that are relevant to Tazz functionality\r\n   */\r\n  private filterRelevantMCPs(mcpServers: Record<string, MCPServer>): Record<string, MCPServer> {\r\n    const tazzRelevantServers = [\r\n      'git',\r\n      'github', \r\n      'atlassian',\r\n      'sonarcloud',\r\n      'playwright',\r\n      'sequential-thinking',\r\n      'claude-task-master',\r\n      'fetch',\r\n      'figma',\r\n      'context7'\r\n    ]\r\n\r\n    const filtered = Object.fromEntries(\r\n      Object.entries(mcpServers)\r\n        .filter(([name]) => tazzRelevantServers.includes(name))\r\n        .filter(([, config]) => !config.disabled)\r\n    )\r\n\r\n    this.logger.debug('Filtered relevant MCP servers', {\r\n      total: Object.keys(mcpServers).length,\r\n      relevant: Object.keys(filtered).length,\r\n      servers: Object.keys(filtered)\r\n    })\r\n\r\n    return filtered\r\n  }\r\n\r\n  /**\r\n   * Categorize servers by their functionality for Tazz\r\n   */\r\n  private categorizeServers(servers: Record<string, MCPServer>): MCPConfiguration {\r\n    return {\r\n      codeAnalysis: {\r\n        git: servers.git,\r\n        sonarcloud: servers.sonarcloud,\r\n        fetch: servers.fetch\r\n      },\r\n      projectManagement: {\r\n        atlassian: servers.atlassian,\r\n        github: servers.github\r\n      },\r\n      testing: {\r\n        playwright: servers.playwright,\r\n        sequentialThinking: servers['sequential-thinking']\r\n      },\r\n      taskManagement: {\r\n        claudeTaskMaster: servers['claude-task-master']\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test connections to all available MCP servers\r\n   */\r\n  private async testConnections(): Promise<void> {\r\n    if (!this.mcpConfig) return\r\n\r\n    const allServers = this.getAllServers()\r\n    const connectionPromises = Object.entries(allServers).map(\r\n      async ([name, server]) => {\r\n        try {\r\n          await this.testServerConnection(name, server)\r\n          this.connectedServers.set(name, server)\r\n          this.logger.debug(`MCP server ${name} connected successfully`)\r\n        } catch (error) {\r\n          this.logger.warn(`Failed to connect to MCP server ${name}`, { error: error.message })\r\n        }\r\n      }\r\n    )\r\n\r\n    await Promise.all(connectionPromises)\r\n  }\r\n\r\n  /**\r\n   * Test connection to a specific MCP server\r\n   */\r\n  private async testServerConnection(name: string, server: MCPServer): Promise<void> {\r\n    try {\r\n      const { stdout } = await execa(server.command, server.args, {\r\n        env: { ...process.env, ...server.env },\r\n        timeout: server.timeout * 1000,\r\n        input: JSON.stringify({\r\n          jsonrpc: '2.0',\r\n          id: 1,\r\n          method: 'initialize',\r\n          params: {\r\n            protocolVersion: '2024-11-05',\r\n            capabilities: {},\r\n            clientInfo: {\r\n              name: 'tazz-cli',\r\n              version: '1.0.0'\r\n            }\r\n          }\r\n        })\r\n      })\r\n\r\n      const response = JSON.parse(stdout)\r\n      if (response.error) {\r\n        throw new Error(`Server error: ${response.error.message}`)\r\n      }\r\n    } catch (error) {\r\n      throw new MCPError(`Failed to connect to ${name}`, {\r\n        server: name,\r\n        command: server.command,\r\n        args: server.args\r\n      }, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call an MCP server with a specific method and parameters\r\n   */\r\n  async callMCP(serverName: string, method: string, params: any = {}): Promise<any> {\r\n    const server = this.connectedServers.get(serverName)\r\n    if (!server) {\r\n      throw new MCPError(`MCP server ${serverName} not available`, {\r\n        availableServers: Array.from(this.connectedServers.keys())\r\n      })\r\n    }\r\n\r\n    try {\r\n      const requestId = Date.now()\r\n      const request = {\r\n        jsonrpc: '2.0',\r\n        id: requestId,\r\n        method,\r\n        params\r\n      }\r\n\r\n      this.logger.debug(`Calling MCP server ${serverName}`, { method, params })\r\n\r\n      const { stdout } = await execa(server.command, server.args, {\r\n        env: { ...process.env, ...server.env },\r\n        timeout: server.timeout * 1000,\r\n        input: JSON.stringify(request)\r\n      })\r\n\r\n      const response = JSON.parse(stdout)\r\n      \r\n      if (response.error) {\r\n        throw new MCPError(`MCP call failed: ${response.error.message}`, {\r\n          server: serverName,\r\n          method,\r\n          error: response.error\r\n        })\r\n      }\r\n\r\n      this.logger.debug(`MCP call successful`, { server: serverName, method })\r\n      return response.result\r\n    } catch (error) {\r\n      this.logger.error(`MCP call failed`, error, { server: serverName, method })\r\n      throw new MCPError(`Failed to call ${serverName}.${method}`, {\r\n        server: serverName,\r\n        method,\r\n        params\r\n      }, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a specific MCP server is available and connected\r\n   */\r\n  isAvailable(serverName: string): boolean {\r\n    return this.connectedServers.has(serverName)\r\n  }\r\n\r\n  /**\r\n   * Get all connected servers\r\n   */\r\n  getConnectedServers(): string[] {\r\n    return Array.from(this.connectedServers.keys())\r\n  }\r\n\r\n  /**\r\n   * Get MCP configuration\r\n   */\r\n  getConfiguration(): MCPConfiguration | null {\r\n    return this.mcpConfig\r\n  }\r\n\r\n  /**\r\n   * Helper to get all servers from categorized configuration\r\n   */\r\n  private getAllServers(): Record<string, MCPServer> {\r\n    if (!this.mcpConfig) return {}\r\n\r\n    const allServers: Record<string, MCPServer> = {}\r\n\r\n    // Flatten all server categories\r\n    Object.values(this.mcpConfig).forEach(category => {\r\n      Object.entries(category).forEach(([key, server]) => {\r\n        if (server) {\r\n          allServers[key] = server\r\n        }\r\n      })\r\n    })\r\n\r\n    return allServers\r\n  }\r\n\r\n  /**\r\n   * Setup project-specific MCP configuration\r\n   */\r\n  async setupProjectSpecific(projectPath: string): Promise<void> {\r\n    // MCP configuration is now handled through .claude/settings.json\r\n    // This method is kept for compatibility but doesn't create separate mcp.json\r\n    try {\r\n      const defaultBranch = await this.detectDefaultBranch(projectPath)\r\n      this.logger.info('Project-specific MCP configuration prepared', { \r\n        projectPath,\r\n        connectedServers: Array.from(this.connectedServers.keys()),\r\n        defaultBranch\r\n      })\r\n    } catch (error) {\r\n      this.logger.error('Failed to setup project MCP configuration', error)\r\n      throw new MCPError('Failed to setup project-specific MCP configuration', {\r\n        projectPath\r\n      }, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect default branch for git repository\r\n   */\r\n  private async detectDefaultBranch(projectPath: string): Promise<string> {\r\n    try {\r\n      if (this.isAvailable('git')) {\r\n        const result = await this.callMCP('git', 'get_default_branch', {\r\n          repository: projectPath\r\n        })\r\n        return result.branch || 'main'\r\n      }\r\n      \r\n      // Fallback to git command\r\n      const { stdout } = await execa('git', ['symbolic-ref', 'refs/remotes/origin/HEAD'], {\r\n        cwd: projectPath\r\n      })\r\n      return stdout.replace('refs/remotes/origin/', '')\r\n    } catch {\r\n      return 'main' // Default fallback\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper to write files (for testing purposes)\r\n   */\r\n  private async writeFile(path: string, content: string): Promise<void> {\r\n    await ensureFile(path)\r\n    await fsWriteFile(path, content, 'utf-8')\r\n  }\r\n}", "export * from \"./errors.js\";\nexport * from \"./helpers/parseUtil.js\";\nexport * from \"./helpers/typeAliases.js\";\nexport * from \"./helpers/util.js\";\nexport * from \"./types.js\";\nexport * from \"./ZodError.js\";\n", "export var util;\n(function (util) {\n    util.assertEqual = (_) => { };\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && Number.isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array.map((val) => (typeof val === \"string\" ? `'${val}'` : val)).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nexport var objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nexport const ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nexport const getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n", "import { util } from \"./helpers/util.js\";\nexport const ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nexport const quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nexport class ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                const firstEl = sub.path[0];\n                fieldErrors[firstEl] = fieldErrors[firstEl] || [];\n                fieldErrors[firstEl].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n", "import { ZodIssueCode } from \"../ZodError.js\";\nimport { util, ZodParsedType } from \"../helpers/util.js\";\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"bigint\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\nexport default errorMap;\n", "import defaultErrorMap from \"./locales/en.js\";\nlet overrideErrorMap = defaultErrorMap;\nexport { defaultErrorMap };\nexport function setErrorMap(map) {\n    overrideErrorMap = map;\n}\nexport function getErrorMap() {\n    return overrideErrorMap;\n}\n", "import { getErrorMap } from \"../errors.js\";\nimport defaultErrorMap from \"../locales/en.js\";\nexport const makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nexport const EMPTY_PATH = [];\nexport function addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === defaultErrorMap ? undefined : defaultErrorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nexport class ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nexport const INVALID = Object.freeze({\n    status: \"aborted\",\n});\nexport const DIRTY = (value) => ({ status: \"dirty\", value });\nexport const OK = (value) => ({ status: \"valid\", value });\nexport const isAborted = (x) => x.status === \"aborted\";\nexport const isDirty = (x) => x.status === \"dirty\";\nexport const isValid = (x) => x.status === \"valid\";\nexport const isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n", "export var errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    // biome-ignore lint:\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message?.message;\n})(errorUtil || (errorUtil = {}));\n", "import { ZodError, ZodIssueCode, } from \"./ZodError.js\";\nimport { defaultErrorMap, getErrorMap } from \"./errors.js\";\nimport { errorUtil } from \"./helpers/errorUtil.js\";\nimport { DIRTY, INVALID, OK, ParseStatus, addIssueToContext, isAborted, isAsync, isDirty, isValid, makeIssue, } from \"./helpers/parseUtil.js\";\nimport { util, ZodParsedType, getParsedType } from \"./helpers/util.js\";\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (Array.isArray(this._key)) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message ?? ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: message ?? required_error ?? ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: message ?? invalid_type_error ?? ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nexport class ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: params?.async ?? false,\n                contextualErrorMap: params?.errorMap,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if (err?.message?.toLowerCase()?.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params?.errorMap,\n                async: true,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&\u2019*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    let secondsRegexSource = `[0-5]\\\\d`;\n    if (args.precision) {\n        secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n    }\n    const secondsQuantifier = args.precision ? \"+\" : \"?\"; // require seconds if precision is nonzero\n    return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nexport function datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        if (!header)\n            return false;\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (\"typ\" in decoded && decoded?.typ !== \"JWT\")\n            return false;\n        if (!decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nexport class ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            offset: options?.offset ?? false,\n            local: options?.local ?? false,\n            ...errorUtil.errToObj(options?.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            ...errorUtil.errToObj(options?.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options?.position,\n            ...errorUtil.errToObj(options?.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / 10 ** decCount;\n}\nexport class ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" || (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null;\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (Number.isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: params?.coerce || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nexport class ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        this._cached = { shape, keys };\n        return this._cached;\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") {\n            }\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: errorUtil.errToObj(message).message ?? defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        for (const key of util.objectKeys(mask)) {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        for (const key of util.objectKeys(this.shape)) {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        for (const key of util.objectKeys(this.shape)) {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        for (const key of util.objectKeys(this.shape)) {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nexport class ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nexport class ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\n// type ZodTupleItems = [ZodTypeAny, ...ZodTypeAny[]];\nexport class ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nexport class ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), defaultErrorMap].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), defaultErrorMap].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args ? args : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nexport class ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nexport class ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(this._def.values);\n        }\n        if (!this._cache.has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\nZodEnum.create = createZodEnum;\nexport class ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(util.getValidEnumValues(this._def.values));\n        }\n        if (!this._cache.has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return INVALID;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {\n                    if (!isValid(base))\n                        return INVALID;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({\n                        status: status.value,\n                        value: result,\n                    }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nexport { ZodEffects as ZodTransformer };\nexport class ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nexport const BRAND = Symbol(\"zod_brand\");\nexport class ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nexport class ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nexport class ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nexport function custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = params.fatal ?? fatal ?? true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = params.fatal ?? fatal ?? true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nexport { ZodType as Schema, ZodType as ZodSchema };\nexport const late = {\n    object: ZodObject.lazycreate,\n};\nexport var ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n// requires TS 4.4+\nclass Class {\n    constructor(..._) { }\n}\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nexport const coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nexport { anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, dateType as date, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, instanceOfType as instanceof, intersectionType as intersection, lazyType as lazy, literalType as literal, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, recordType as record, setType as set, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, voidType as void, };\nexport const NEVER = INVALID;\n", "// Core type definitions for Tazz CLI\r\nexport interface TazzSession {\r\n  id: string\r\n  branch: string\r\n  worktreePath: string\r\n  status: SessionStatus\r\n  createdAt: Date\r\n  lastActive: Date\r\n  agents: AgentInstance[]\r\n  tasks: TaskReference[]\r\n  metadata: SessionMetadata\r\n}\r\n\r\nexport enum SessionStatus {\r\n  ACTIVE = 'active',\r\n  STOPPED = 'stopped',\r\n  FAILED = 'failed',\r\n  PAUSED = 'paused'\r\n}\r\n\r\nexport interface SessionMetadata {\r\n  jira?: {\r\n    title: string\r\n    description: string\r\n    priority: string\r\n    assignee?: string\r\n    status: string\r\n    type: string\r\n    storyPoints?: number\r\n  }\r\n  github?: {\r\n    relatedPRs: Array<{\r\n      number: number\r\n      title: string\r\n      status: string\r\n      url: string\r\n    }>\r\n  }\r\n  sonarcloud?: {\r\n    projectKey: string\r\n    qualityGate: string\r\n    coverage: number\r\n    issues: number\r\n  }\r\n  custom?: Record<string, unknown>\r\n}\r\n\r\nexport interface AgentInstance {\r\n  id: string\r\n  name: string\r\n  type: AgentType\r\n  status: AgentStatus\r\n  pid?: number\r\n  tmuxPane?: string\r\n  lastActivity: Date\r\n  capabilities: string[]\r\n}\r\n\r\nexport enum AgentType {\r\n  CLAUDE = 'claude',\r\n  MCP = 'mcp',\r\n  CUSTOM = 'custom'\r\n}\r\n\r\nexport enum AgentStatus {\r\n  RUNNING = 'running',\r\n  STOPPED = 'stopped',\r\n  ERROR = 'error',\r\n  STARTING = 'starting'\r\n}\r\n\r\nexport interface TaskReference {\r\n  id: string\r\n  title: string\r\n  description: string\r\n  status: TaskStatus\r\n  priority: number\r\n  assignedAgent?: string\r\n  dependencies: string[]\r\n  estimatedTime?: number\r\n  actualTime?: number\r\n}\r\n\r\nexport enum TaskStatus {\r\n  TODO = 'todo',\r\n  IN_PROGRESS = 'in_progress',\r\n  BLOCKED = 'blocked',\r\n  COMPLETED = 'completed',\r\n  CANCELLED = 'cancelled'\r\n}\r\n\r\n// MCP Integration Types\r\nexport interface MCPServer {\r\n  name: string\r\n  command: string\r\n  args: string[]\r\n  env: Record<string, string>\r\n  autoApprove: string[]\r\n  disabled: boolean\r\n  timeout: number\r\n  transportType: 'stdio' | 'sse'\r\n}\r\n\r\nexport interface MCPConfiguration {\r\n  codeAnalysis: {\r\n    git?: MCPServer\r\n    sonarcloud?: MCPServer\r\n    fetch?: MCPServer\r\n  }\r\n  projectManagement: {\r\n    atlassian?: MCPServer\r\n    github?: MCPServer\r\n  }\r\n  testing: {\r\n    playwright?: MCPServer\r\n    sequentialThinking?: MCPServer\r\n  }\r\n  taskManagement: {\r\n    claudeTaskMaster?: MCPServer\r\n  }\r\n}\r\n\r\nexport interface AgentCommand {\r\n  type: AgentCommandType\r\n  sessionId?: string\r\n  payload: unknown\r\n  timestamp: Date\r\n  requestId: string\r\n}\r\n\r\nexport enum AgentCommandType {\r\n  START_SESSION = 'start_session',\r\n  ATTACH_SESSION = 'attach_session',\r\n  RUN_TASK = 'run_task',\r\n  UPDATE_TODO = 'update_todo',\r\n  SPAWN_AGENT = 'spawn_agent',\r\n  PARALLEL_RUN = 'parallel_run',\r\n  ANALYZE_CODE = 'analyze_code',\r\n  GENERATE_TESTS = 'generate_tests'\r\n}\r\n\r\nexport interface CommandResult {\r\n  success: boolean\r\n  data?: unknown\r\n  error?: string\r\n  metadata?: Record<string, unknown>\r\n}\r\n\r\n// Project Analysis Types\r\nexport interface DependencyAnalysis {\r\n  packageManager: string\r\n  dependencies: Array<{\r\n    name: string\r\n    version: string\r\n    type: 'dependency' | 'devDependency' | 'peerDependency'\r\n  }>\r\n  outdated: string[]\r\n  vulnerabilities?: number\r\n}\r\n\r\nexport interface ExistingTestingStrategy {\r\n  hasTests: boolean\r\n  framework?: string\r\n  testDirectories: string[]\r\n  coverage?: {\r\n    configured: boolean\r\n    threshold?: number\r\n    tool?: string\r\n  }\r\n  e2e?: {\r\n    configured: boolean\r\n    framework?: string\r\n  }\r\n}\r\n\r\nexport interface ProjectAnalysis {\r\n  structure: ProjectStructure\r\n  technologies: TechnologyStack\r\n  patterns: CodePatterns\r\n  quality: QualityMetrics\r\n  dependencies: DependencyAnalysis\r\n  testingStrategy: ExistingTestingStrategy\r\n}\r\n\r\nexport interface ProjectStructure {\r\n  type: ProjectType\r\n  sourceDirectories: string[]\r\n  testDirectories: string[]\r\n  configFiles: string[]\r\n  buildTools: string[]\r\n  hasAPI: boolean\r\n  hasFrontend: boolean\r\n  baseURL?: string\r\n}\r\n\r\nexport enum ProjectType {\r\n  FRONTEND = 'frontend',\r\n  BACKEND = 'backend',\r\n  FULLSTACK = 'fullstack',\r\n  LIBRARY = 'library',\r\n  MOBILE = 'mobile',\r\n  MONOREPO = 'monorepo'\r\n}\r\n\r\nexport interface TechnologyStack {\r\n  language: string\r\n  framework?: string\r\n  testing?: string\r\n  buildSystem?: string\r\n  cicd?: string\r\n  database?: string\r\n}\r\n\r\nexport interface CodePatterns {\r\n  common: string[]\r\n  architectural: string[]\r\n  naming: string[]\r\n  imports: string[]\r\n}\r\n\r\nexport interface QualityMetrics {\r\n  coverage?: number\r\n  coverageThreshold?: number\r\n  hasQualityGates: boolean\r\n  linting: boolean\r\n  formatting: boolean\r\n  complexity?: number\r\n}\r\n\r\n// Configuration Types\r\nexport interface TazzConfig {\r\n  maxConcurrentSessions: number\r\n  defaultBranch: string\r\n  tmuxPrefix: string\r\n  agentTimeout: number\r\n  logLevel: 'debug' | 'info' | 'warn' | 'error'\r\n  plugins: string[]\r\n  agents: Record<string, AgentConfig>\r\n  hooks: HookConfiguration\r\n  mcpServers: MCPConfiguration\r\n}\r\n\r\nexport interface AgentConfig {\r\n  enabled: boolean\r\n  apiKey?: string\r\n  model?: string\r\n  timeout?: number\r\n  maxRetries?: number\r\n}\r\n\r\nexport interface HookConfiguration {\r\n  enabled: boolean\r\n  scripts: Record<string, string>\r\n  events: Record<string, HookEvent[]>\r\n}\r\n\r\nexport interface HookEvent {\r\n  name: string\r\n  matcher: HookMatcher\r\n  script: string\r\n  async: boolean\r\n}\r\n\r\nexport interface HookMatcher {\r\n  toolName?: string | string[]\r\n  command?: string\r\n  sessionId?: string\r\n  custom?: string\r\n}\r\n\r\n// Error Types\r\nexport abstract class TazzError extends Error {\r\n  abstract readonly code: string\r\n  abstract readonly severity: 'low' | 'medium' | 'high' | 'critical'\r\n  \r\n  constructor(\r\n    message: string,\r\n    public readonly context?: Record<string, unknown>,\r\n    public readonly cause?: Error\r\n  ) {\r\n    super(message)\r\n    this.name = this.constructor.name\r\n  }\r\n}\r\n\r\nexport class SessionError extends TazzError {\r\n  readonly code = 'SESSION_ERROR'\r\n  readonly severity = 'high'\r\n}\r\n\r\nexport class GitError extends TazzError {\r\n  readonly code = 'GIT_ERROR'\r\n  readonly severity = 'medium'\r\n}\r\n\r\nexport class AgentError extends TazzError {\r\n  readonly code = 'AGENT_ERROR'\r\n  readonly severity = 'high'\r\n}\r\n\r\nexport class MCPError extends TazzError {\r\n  readonly code = 'MCP_ERROR'\r\n  readonly severity = 'medium'\r\n}\r\n\r\nexport class ValidationError extends TazzError {\r\n  readonly code = 'VALIDATION_ERROR'\r\n  readonly severity = 'low'\r\n}", "import { readFile, pathExists, readdir, stat, writeFile, ensureFile } from 'fs-extra'\r\nimport { join, extname, basename } from 'path'\r\nimport { glob } from 'glob'\r\nimport { MCPIntegrationService } from './MCPIntegrationService'\r\nimport { Logger } from '../../utils/logger'\r\nimport { getProjectTazzDir } from '../../utils/paths'\r\nimport { \r\n  ProjectAnalysis, \r\n  ProjectStructure, \r\n  TechnologyStack, \r\n  CodePatterns, \r\n  QualityMetrics, \r\n  DependencyAnalysis,\r\n  ExistingTestingStrategy,\r\n  ProjectType,\r\n  TazzError\r\n} from '../types'\r\n\r\nexport class CodebaseAnalysisError extends TazzError {\r\n  readonly code = 'CODEBASE_ANALYSIS_ERROR'\r\n  readonly severity = 'medium'\r\n}\r\n\r\nexport class CodebaseAnalyzer {\r\n  private logger: Logger\r\n  private mcpService: MCPIntegrationService\r\n  private projectPath: string\r\n\r\n  constructor(mcpService: MCPIntegrationService, logger: Logger, projectPath: string = process.cwd()) {\r\n    this.mcpService = mcpService\r\n    this.logger = logger\r\n    this.projectPath = projectPath\r\n  }\r\n\r\n  /**\r\n   * Main analysis method - orchestrates all analysis steps\r\n   */\r\n  async analyzeProject(): Promise<ProjectAnalysis> {\r\n    this.logger.info('Starting comprehensive codebase analysis', { projectPath: this.projectPath })\r\n\r\n    try {\r\n      const [\r\n        structure,\r\n        technologies,\r\n        patterns,\r\n        quality,\r\n        dependencies,\r\n        testingStrategy\r\n      ] = await Promise.all([\r\n        this.analyzeProjectStructure(),\r\n        this.detectTechnologies(),\r\n        this.extractCodePatterns(),\r\n        this.runQualityAnalysis(),\r\n        this.analyzeDependencies(),\r\n        this.analyzeExistingTests()\r\n      ])\r\n\r\n      const analysis: ProjectAnalysis = {\r\n        structure,\r\n        technologies,\r\n        patterns,\r\n        quality,\r\n        dependencies,\r\n        testingStrategy\r\n      }\r\n\r\n      // Save analysis to .tazz/analysis.json\r\n      await this.saveAnalysis(analysis)\r\n      \r\n      this.logger.info('Codebase analysis completed', {\r\n        projectType: structure.type,\r\n        language: technologies.language,\r\n        framework: technologies.framework,\r\n        hasTests: testingStrategy.hasTests\r\n      })\r\n\r\n      return analysis\r\n    } catch (error) {\r\n      this.logger.error('Codebase analysis failed', error as Error)\r\n      throw new CodebaseAnalysisError('Failed to analyze codebase', {\r\n        projectPath: this.projectPath\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze project structure and organization\r\n   */\r\n  private async analyzeProjectStructure(): Promise<ProjectStructure> {\r\n    this.logger.debug('Analyzing project structure')\r\n\r\n    // Use git MCP if available for better file listing\r\n    let allFiles: string[] = []\r\n    if (this.mcpService.isAvailable('git')) {\r\n      try {\r\n        const gitFiles = await this.mcpService.callMCP('git', 'list_files', {\r\n          repository: this.projectPath\r\n        })\r\n        allFiles = gitFiles.files || []\r\n      } catch (error) {\r\n        this.logger.warn('Git MCP failed, falling back to filesystem scan')\r\n        allFiles = await this.scanFilesystem()\r\n      }\r\n    } else {\r\n      allFiles = await this.scanFilesystem()\r\n    }\r\n\r\n    const structure: ProjectStructure = {\r\n      type: this.detectProjectType(allFiles),\r\n      sourceDirectories: this.findSourceDirectories(allFiles),\r\n      testDirectories: this.findTestDirectories(allFiles),\r\n      configFiles: this.findConfigFiles(allFiles),\r\n      buildTools: this.detectBuildTools(allFiles),\r\n      hasAPI: this.detectAPI(allFiles),\r\n      hasFrontend: this.detectFrontend(allFiles),\r\n      baseURL: await this.detectBaseURL()\r\n    }\r\n\r\n    return structure\r\n  }\r\n\r\n  /**\r\n   * Scan filesystem when git MCP is not available\r\n   */\r\n  private async scanFilesystem(): Promise<string[]> {\r\n    const patterns = [\r\n      '**/*.{js,ts,jsx,tsx,py,go,rs,java,php,rb}',\r\n      '**/package.json',\r\n      '**/requirements.txt',\r\n      '**/Cargo.toml',\r\n      '**/go.mod',\r\n      '**/*.config.{js,ts,json}',\r\n      '**/test/**/*',\r\n      '**/tests/**/*',\r\n      '**/*.test.*',\r\n      '**/*.spec.*'\r\n    ]\r\n\r\n    const files = await glob(patterns, {\r\n      cwd: this.projectPath,\r\n      ignore: ['node_modules/**', 'dist/**', 'build/**', '.git/**']\r\n    })\r\n\r\n    return files\r\n  }\r\n\r\n  /**\r\n   * Detect project type based on files and structure\r\n   */\r\n  private detectProjectType(files: string[]): ProjectType {\r\n    const hasPackageJson = files.some(f => f.includes('package.json'))\r\n    const hasIndexHtml = files.some(f => f.includes('index.html'))\r\n    const hasReactFiles = files.some(f => f.includes('.jsx') || f.includes('.tsx'))\r\n    const hasServerFiles = files.some(f => f.includes('server') || f.includes('api'))\r\n    const hasPyFiles = files.some(f => f.endsWith('.py'))\r\n    const hasGoFiles = files.some(f => f.endsWith('.go'))\r\n    const hasMultiplePackageJsons = files.filter(f => f.includes('package.json')).length > 1\r\n\r\n    if (hasMultiplePackageJsons) return ProjectType.MONOREPO\r\n    if (hasReactFiles && hasServerFiles) return ProjectType.FULLSTACK\r\n    if (hasIndexHtml || hasReactFiles) return ProjectType.FRONTEND\r\n    if (hasServerFiles || hasPyFiles || hasGoFiles) return ProjectType.BACKEND\r\n    if (hasPackageJson && !hasIndexHtml) return ProjectType.LIBRARY\r\n\r\n    return ProjectType.BACKEND // Default fallback\r\n  }\r\n\r\n  /**\r\n   * Find source code directories\r\n   */\r\n  private findSourceDirectories(files: string[]): string[] {\r\n    const commonSrcDirs = ['src', 'lib', 'app', 'components', 'pages', 'routes']\r\n    const foundDirs = new Set<string>()\r\n\r\n    files.forEach(file => {\r\n      const parts = file.split('/')\r\n      if (parts.length > 1) {\r\n        const firstDir = parts[0]\r\n        if (commonSrcDirs.includes(firstDir) || firstDir.endsWith('src')) {\r\n          foundDirs.add(firstDir)\r\n        }\r\n      }\r\n    })\r\n\r\n    return Array.from(foundDirs)\r\n  }\r\n\r\n  /**\r\n   * Find test directories\r\n   */\r\n  private findTestDirectories(files: string[]): string[] {\r\n    const testDirs = new Set<string>()\r\n    \r\n    files.forEach(file => {\r\n      if (file.includes('test') || file.includes('spec') || file.includes('__tests__')) {\r\n        const parts = file.split('/')\r\n        const testDir = parts.find(part => \r\n          part.includes('test') || part.includes('spec') || part === '__tests__'\r\n        )\r\n        if (testDir) testDirs.add(testDir)\r\n      }\r\n    })\r\n\r\n    return Array.from(testDirs)\r\n  }\r\n\r\n  /**\r\n   * Find configuration files\r\n   */\r\n  private findConfigFiles(files: string[]): string[] {\r\n    const configPatterns = [\r\n      /.*config\\.(js|ts|json)$/,\r\n      /^(babel|webpack|rollup|vite|next)\\.config\\./,\r\n      /^(tsconfig|jsconfig)\\.json$/,\r\n      /^\\.eslintrc/,\r\n      /^\\.prettierrc/,\r\n      /^docker-compose\\./,\r\n      /^Dockerfile$/\r\n    ]\r\n\r\n    return files.filter(file => {\r\n      const filename = basename(file)\r\n      return configPatterns.some(pattern => pattern.test(filename))\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Detect build tools from files\r\n   */\r\n  private detectBuildTools(files: string[]): string[] {\r\n    const tools = new Set<string>()\r\n    \r\n    if (files.some(f => f.includes('package.json'))) {\r\n      // Check package.json content for scripts\r\n      try {\r\n        const packageJson = require(join(this.projectPath, 'package.json'))\r\n        if (packageJson.scripts) {\r\n          if (packageJson.scripts.build) tools.add('npm/yarn')\r\n          if (packageJson.devDependencies?.webpack) tools.add('webpack')\r\n          if (packageJson.devDependencies?.vite) tools.add('vite')\r\n          if (packageJson.devDependencies?.['@next/core']) tools.add('next.js')\r\n        }\r\n      } catch (error) {\r\n        this.logger.debug('Could not read package.json')\r\n      }\r\n    }\r\n\r\n    if (files.some(f => f.includes('Cargo.toml'))) tools.add('cargo')\r\n    if (files.some(f => f.includes('go.mod'))) tools.add('go modules')\r\n    if (files.some(f => f.includes('Makefile'))) tools.add('make')\r\n    if (files.some(f => f.includes('docker-compose'))) tools.add('docker')\r\n\r\n    return Array.from(tools)\r\n  }\r\n\r\n  /**\r\n   * Detect if project has API endpoints\r\n   */\r\n  private detectAPI(files: string[]): boolean {\r\n    const apiPatterns = [\r\n      /api\\//,\r\n      /routes\\//,\r\n      /controllers\\//,\r\n      /endpoints\\//,\r\n      /server\\./,\r\n      /app\\.py$/,\r\n      /main\\.go$/\r\n    ]\r\n\r\n    return files.some(file => apiPatterns.some(pattern => pattern.test(file)))\r\n  }\r\n\r\n  /**\r\n   * Detect if project has frontend components\r\n   */\r\n  private detectFrontend(files: string[]): boolean {\r\n    return files.some(file => \r\n      file.includes('index.html') ||\r\n      file.endsWith('.jsx') ||\r\n      file.endsWith('.tsx') ||\r\n      file.endsWith('.vue') ||\r\n      file.includes('components/') ||\r\n      file.includes('pages/')\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Detect base URL for development server\r\n   */\r\n  private async detectBaseURL(): Promise<string | undefined> {\r\n    try {\r\n      const packageJsonPath = join(this.projectPath, 'package.json')\r\n      if (await pathExists(packageJsonPath)) {\r\n        const packageJson = JSON.parse(await readFile(packageJsonPath, 'utf-8'))\r\n        \r\n        // Check common dev server ports\r\n        if (packageJson.scripts?.dev?.includes('3000')) return 'http://localhost:3000'\r\n        if (packageJson.scripts?.dev?.includes('8080')) return 'http://localhost:8080'\r\n        if (packageJson.scripts?.start?.includes('3000')) return 'http://localhost:3000'\r\n      }\r\n    } catch (error) {\r\n      this.logger.debug('Could not detect base URL')\r\n    }\r\n    \r\n    return undefined\r\n  }\r\n\r\n  /**\r\n   * Detect technology stack\r\n   */\r\n  private async detectTechnologies(): Promise<TechnologyStack> {\r\n    this.logger.debug('Detecting technology stack')\r\n\r\n    const technologies: TechnologyStack = {\r\n      language: await this.detectPrimaryLanguage(),\r\n      framework: await this.detectFramework(),\r\n      testing: await this.detectTestingFramework(),\r\n      buildSystem: await this.detectBuildSystem(),\r\n      cicd: await this.detectCICDPlatform(),\r\n      database: await this.detectDatabase()\r\n    }\r\n\r\n    return technologies\r\n  }\r\n\r\n  /**\r\n   * Detect primary programming language\r\n   */\r\n  private async detectPrimaryLanguage(): Promise<string> {\r\n    const files = await this.scanFilesystem()\r\n    const extensions: Record<string, number> = {}\r\n\r\n    files.forEach(file => {\r\n      const ext = extname(file)\r\n      extensions[ext] = (extensions[ext] || 0) + 1\r\n    })\r\n\r\n    // Map extensions to languages\r\n    const langMap: Record<string, string> = {\r\n      '.js': 'javascript',\r\n      '.ts': 'typescript',\r\n      '.jsx': 'javascript',\r\n      '.tsx': 'typescript',\r\n      '.py': 'python',\r\n      '.go': 'go',\r\n      '.rs': 'rust',\r\n      '.java': 'java',\r\n      '.php': 'php',\r\n      '.rb': 'ruby'\r\n    }\r\n\r\n    const mostCommonExt = Object.entries(extensions)\r\n      .sort(([,a], [,b]) => b - a)[0]?.[0]\r\n\r\n    return langMap[mostCommonExt] || 'unknown'\r\n  }\r\n\r\n  /**\r\n   * Detect web framework\r\n   */\r\n  private async detectFramework(): Promise<string | undefined> {\r\n    try {\r\n      const packageJsonPath = join(this.projectPath, 'package.json')\r\n      if (await pathExists(packageJsonPath)) {\r\n        const packageJson = JSON.parse(await readFile(packageJsonPath, 'utf-8'))\r\n        const deps = { ...packageJson.dependencies, ...packageJson.devDependencies }\r\n\r\n        if (deps.react) return 'react'\r\n        if (deps.vue) return 'vue'\r\n        if (deps.angular || deps['@angular/core']) return 'angular'\r\n        if (deps.express) return 'express'\r\n        if (deps.fastify) return 'fastify'\r\n        if (deps.next) return 'next.js'\r\n        if (deps.nuxt) return 'nuxt.js'\r\n      }\r\n\r\n      // Check Python frameworks\r\n      const requirementsPath = join(this.projectPath, 'requirements.txt')\r\n      if (await pathExists(requirementsPath)) {\r\n        const requirements = await readFile(requirementsPath, 'utf-8')\r\n        if (requirements.includes('django')) return 'django'\r\n        if (requirements.includes('flask')) return 'flask'\r\n        if (requirements.includes('fastapi')) return 'fastapi'\r\n      }\r\n    } catch (error) {\r\n      this.logger.debug('Could not detect framework')\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n  /**\r\n   * Detect testing framework\r\n   */\r\n  private async detectTestingFramework(): Promise<string | undefined> {\r\n    try {\r\n      const packageJsonPath = join(this.projectPath, 'package.json')\r\n      if (await pathExists(packageJsonPath)) {\r\n        const packageJson = JSON.parse(await readFile(packageJsonPath, 'utf-8'))\r\n        const deps = { ...packageJson.dependencies, ...packageJson.devDependencies }\r\n\r\n        if (deps.jest) return 'jest'\r\n        if (deps.vitest) return 'vitest'\r\n        if (deps.mocha) return 'mocha'\r\n        if (deps.cypress) return 'cypress'\r\n        if (deps.playwright || deps['@playwright/test']) return 'playwright'\r\n        if (deps['@testing-library/react']) return 'react-testing-library'\r\n      }\r\n    } catch (error) {\r\n      this.logger.debug('Could not detect testing framework')\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n  /**\r\n   * Detect build system\r\n   */\r\n  private async detectBuildSystem(): Promise<string | undefined> {\r\n    const files = await this.scanFilesystem()\r\n    \r\n    if (files.some(f => f.includes('vite.config'))) return 'vite'\r\n    if (files.some(f => f.includes('webpack.config'))) return 'webpack'\r\n    if (files.some(f => f.includes('rollup.config'))) return 'rollup'\r\n    if (files.some(f => f.includes('next.config'))) return 'next.js'\r\n    if (files.some(f => f.includes('Cargo.toml'))) return 'cargo'\r\n    if (files.some(f => f.includes('go.mod'))) return 'go build'\r\n\r\n    return undefined\r\n  }\r\n\r\n  /**\r\n   * Detect CI/CD platform\r\n   */\r\n  private async detectCICDPlatform(): Promise<string | undefined> {\r\n    const files = await this.scanFilesystem()\r\n    \r\n    if (files.some(f => f.includes('.github/workflows'))) return 'github-actions'\r\n    if (files.some(f => f.includes('.gitlab-ci.yml'))) return 'gitlab-ci'\r\n    if (files.some(f => f.includes('azure-pipelines.yml'))) return 'azure-pipelines'\r\n    if (files.some(f => f.includes('Jenkinsfile'))) return 'jenkins'\r\n\r\n    return undefined\r\n  }\r\n\r\n  /**\r\n   * Detect database technology\r\n   */\r\n  private async detectDatabase(): Promise<string | undefined> {\r\n    try {\r\n      const packageJsonPath = join(this.projectPath, 'package.json')\r\n      if (await pathExists(packageJsonPath)) {\r\n        const packageJson = JSON.parse(await readFile(packageJsonPath, 'utf-8'))\r\n        const deps = { ...packageJson.dependencies, ...packageJson.devDependencies }\r\n\r\n        if (deps.mongodb || deps.mongoose) return 'mongodb'\r\n        if (deps.pg || deps.postgres) return 'postgresql'\r\n        if (deps.mysql || deps.mysql2) return 'mysql'\r\n        if (deps.sqlite3 || deps['better-sqlite3']) return 'sqlite'\r\n        if (deps.redis) return 'redis'\r\n      }\r\n    } catch (error) {\r\n      this.logger.debug('Could not detect database')\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n  /**\r\n   * Extract common code patterns\r\n   */\r\n  private async extractCodePatterns(): Promise<CodePatterns> {\r\n    this.logger.debug('Extracting code patterns')\r\n\r\n    // This would be much more sophisticated in practice\r\n    // For now, we'll do basic pattern detection\r\n    const patterns: CodePatterns = {\r\n      common: await this.detectCommonPatterns(),\r\n      architectural: await this.detectArchitecturalPatterns(),\r\n      naming: await this.detectNamingPatterns(),\r\n      imports: await this.detectImportPatterns()\r\n    }\r\n\r\n    return patterns\r\n  }\r\n\r\n  private async detectCommonPatterns(): Promise<string[]> {\r\n    // Basic implementation - would be much more sophisticated\r\n    const patterns: string[] = []\r\n    \r\n    try {\r\n      const files = await this.scanFilesystem()\r\n      const codeFiles = files.filter(f => /\\.(js|ts|jsx|tsx)$/.test(f))\r\n      \r\n      // Sample some files to detect patterns\r\n      for (const file of codeFiles.slice(0, 10)) {\r\n        try {\r\n          const content = await readFile(join(this.projectPath, file), 'utf-8')\r\n          \r\n          if (content.includes('export {') && content.includes('} from')) {\r\n            patterns.push('barrel-exports')\r\n          }\r\n          if (content.includes('try {') && content.includes('catch')) {\r\n            patterns.push('error-handling')\r\n          }\r\n          if (content.includes('async ') && content.includes('await ')) {\r\n            patterns.push('async-await')\r\n          }\r\n        } catch (error) {\r\n          continue\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.logger.debug('Could not analyze code patterns')\r\n    }\r\n\r\n    return [...new Set(patterns)] // Remove duplicates\r\n  }\r\n\r\n  private async detectArchitecturalPatterns(): Promise<string[]> {\r\n    const patterns: string[] = []\r\n    const files = await this.scanFilesystem()\r\n\r\n    if (files.some(f => f.includes('components/'))) patterns.push('component-based')\r\n    if (files.some(f => f.includes('services/'))) patterns.push('service-layer')\r\n    if (files.some(f => f.includes('utils/') || f.includes('helpers/'))) patterns.push('utility-functions')\r\n    if (files.some(f => f.includes('types/') || f.includes('interfaces/'))) patterns.push('type-definitions')\r\n\r\n    return patterns\r\n  }\r\n\r\n  private async detectNamingPatterns(): Promise<string[]> {\r\n    const patterns: string[] = []\r\n    const files = await this.scanFilesystem()\r\n\r\n    const hasKebabCase = files.some(f => /[a-z]+-[a-z]+/.test(basename(f)))\r\n    const hasCamelCase = files.some(f => /[a-z][A-Z]/.test(basename(f)))\r\n    const hasPascalCase = files.some(f => /^[A-Z][a-z]/.test(basename(f)))\r\n\r\n    if (hasKebabCase) patterns.push('kebab-case')\r\n    if (hasCamelCase) patterns.push('camelCase')\r\n    if (hasPascalCase) patterns.push('PascalCase')\r\n\r\n    return patterns\r\n  }\r\n\r\n  private async detectImportPatterns(): Promise<string[]> {\r\n    // Would analyze actual import statements in code\r\n    return ['relative-imports', 'absolute-imports']\r\n  }\r\n\r\n  /**\r\n   * Run quality analysis using available tools\r\n   */\r\n  private async runQualityAnalysis(): Promise<QualityMetrics> {\r\n    this.logger.debug('Running quality analysis')\r\n\r\n    let metrics: QualityMetrics = {\r\n      hasQualityGates: false,\r\n      linting: false,\r\n      formatting: false\r\n    }\r\n\r\n    // Use SonarCloud MCP if available\r\n    if (this.mcpService.isAvailable('sonarcloud')) {\r\n      try {\r\n        const sonarResults = await this.mcpService.callMCP('sonarcloud', 'get_project_analysis', {\r\n          projectKey: await this.detectProjectKey()\r\n        })\r\n        \r\n        metrics = {\r\n          ...metrics,\r\n          coverage: sonarResults.coverage,\r\n          complexity: sonarResults.complexity,\r\n          hasQualityGates: true\r\n        }\r\n      } catch (error) {\r\n        this.logger.debug('SonarCloud analysis failed, using basic analysis')\r\n      }\r\n    }\r\n\r\n    // Fallback to basic analysis\r\n    const basicAnalysis = await this.basicQualityAnalysis()\r\n    return { ...basicAnalysis, ...metrics }\r\n  }\r\n\r\n  private async basicQualityAnalysis(): Promise<QualityMetrics> {\r\n    const files = await this.scanFilesystem()\r\n    \r\n    return {\r\n      hasQualityGates: files.some(f => f.includes('.eslintrc') || f.includes('sonar')),\r\n      linting: files.some(f => f.includes('.eslintrc')),\r\n      formatting: files.some(f => f.includes('.prettierrc'))\r\n    }\r\n  }\r\n\r\n  private async detectProjectKey(): Promise<string> {\r\n    // Would detect from sonar-project.properties or similar\r\n    return basename(this.projectPath)\r\n  }\r\n\r\n  /**\r\n   * Analyze dependencies\r\n   */\r\n  private async analyzeDependencies(): Promise<DependencyAnalysis> {\r\n    this.logger.debug('Analyzing dependencies')\r\n\r\n    try {\r\n      const packageJsonPath = join(this.projectPath, 'package.json')\r\n      if (await pathExists(packageJsonPath)) {\r\n        const packageJson = JSON.parse(await readFile(packageJsonPath, 'utf-8'))\r\n        \r\n        const dependencies = [\r\n          ...Object.entries(packageJson.dependencies || {}).map(([name, version]) => ({\r\n            name, version: version as string, type: 'dependency' as const\r\n          })),\r\n          ...Object.entries(packageJson.devDependencies || {}).map(([name, version]) => ({\r\n            name, version: version as string, type: 'devDependency' as const\r\n          })),\r\n          ...Object.entries(packageJson.peerDependencies || {}).map(([name, version]) => ({\r\n            name, version: version as string, type: 'peerDependency' as const\r\n          }))\r\n        ]\r\n\r\n        return {\r\n          packageManager: await this.detectPackageManager(),\r\n          dependencies,\r\n          outdated: [] // Would need npm outdated or similar\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.logger.debug('Could not analyze dependencies')\r\n    }\r\n\r\n    return {\r\n      packageManager: 'unknown',\r\n      dependencies: [],\r\n      outdated: []\r\n    }\r\n  }\r\n\r\n  private async detectPackageManager(): Promise<string> {\r\n    const files = await this.scanFilesystem()\r\n    \r\n    if (files.some(f => f.includes('yarn.lock'))) return 'yarn'\r\n    if (files.some(f => f.includes('pnpm-lock.yaml'))) return 'pnpm'\r\n    if (files.some(f => f.includes('package-lock.json'))) return 'npm'\r\n    \r\n    return 'npm' // Default\r\n  }\r\n\r\n  /**\r\n   * Analyze existing test setup\r\n   */\r\n  private async analyzeExistingTests(): Promise<ExistingTestingStrategy> {\r\n    this.logger.debug('Analyzing existing test setup')\r\n\r\n    const files = await this.scanFilesystem()\r\n    const testFiles = files.filter(f => \r\n      f.includes('test') || f.includes('spec') || f.includes('__tests__')\r\n    )\r\n\r\n    const hasTests = testFiles.length > 0\r\n    const framework = await this.detectTestingFramework()\r\n    const testDirectories = this.findTestDirectories(files)\r\n\r\n    return {\r\n      hasTests,\r\n      framework,\r\n      testDirectories,\r\n      coverage: await this.analyzeCoverageSetup(),\r\n      e2e: await this.analyzeE2ESetup()\r\n    }\r\n  }\r\n\r\n  private async analyzeCoverageSetup(): Promise<{ configured: boolean; threshold?: number; tool?: string }> {\r\n    try {\r\n      const packageJsonPath = join(this.projectPath, 'package.json')\r\n      if (await pathExists(packageJsonPath)) {\r\n        const packageJson = JSON.parse(await readFile(packageJsonPath, 'utf-8'))\r\n        \r\n        if (packageJson.jest?.collectCoverage) {\r\n          return {\r\n            configured: true,\r\n            threshold: packageJson.jest.coverageThreshold?.global?.lines,\r\n            tool: 'jest'\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.logger.debug('Could not analyze coverage setup')\r\n    }\r\n\r\n    return { configured: false }\r\n  }\r\n\r\n  private async analyzeE2ESetup(): Promise<{ configured: boolean; framework?: string }> {\r\n    const framework = await this.detectTestingFramework()\r\n    const hasE2E = ['cypress', 'playwright'].includes(framework || '')\r\n\r\n    return {\r\n      configured: hasE2E,\r\n      framework: hasE2E ? framework : undefined\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save analysis results\r\n   */\r\n  private async saveAnalysis(analysis: ProjectAnalysis): Promise<void> {\r\n    const projectTazzDir = getProjectTazzDir(this.projectPath)\r\n    const analysisPath = join(projectTazzDir, 'analysis.json')\r\n    \r\n    await ensureFile(analysisPath)\r\n    await writeFile(analysisPath, JSON.stringify(analysis, null, 2))\r\n    \r\n    this.logger.debug('Analysis saved', { path: analysisPath })\r\n  }\r\n}", "import { writeFile, ensureFile, ensureDir } from 'fs-extra'\r\nimport { join } from 'path'\r\nimport { ProjectAnalysis, TazzError } from '../types'\r\nimport { Logger } from '../../utils/logger'\r\nimport { getProjectTazzDir } from '../../utils/paths'\r\n\r\nexport class RulesGenerationError extends TazzError {\r\n  readonly code = 'RULES_GENERATION_ERROR'\r\n  readonly severity = 'medium'\r\n}\r\n\r\nexport interface TazzRules {\r\n  codeStyle: CodeStyleRules\r\n  testing: TestingRules\r\n  gitWorkflow: GitWorkflowRules\r\n  qualityGates: QualityGateRules\r\n  agentBehavior: AgentBehaviorRules\r\n}\r\n\r\nexport interface CodeStyleRules {\r\n  language: string\r\n  formatter?: string\r\n  linter?: string\r\n  rules: Record<string, string>\r\n  examples: Record<string, string>\r\n  patterns: string[]\r\n}\r\n\r\nexport interface TestingRules {\r\n  framework: string\r\n  testLocation: string\r\n  namingConvention: string\r\n  coverage: {\r\n    minimum: number\r\n    enforce: boolean\r\n  }\r\n  patterns: {\r\n    unit: string[]\r\n    integration: string[]\r\n    e2e: string[]\r\n  }\r\n  templates: {\r\n    unit?: string\r\n    integration?: string\r\n    e2e?: string\r\n  }\r\n}\r\n\r\nexport interface GitWorkflowRules {\r\n  branchNaming: string\r\n  commitMessage: {\r\n    format: string\r\n    examples: string[]\r\n  }\r\n  pullRequest: {\r\n    template: string\r\n    requirements: string[]\r\n  }\r\n}\r\n\r\nexport interface QualityGateRules {\r\n  coverage: {\r\n    minimum: number\r\n    failOnDecrease: boolean\r\n  }\r\n  linting: {\r\n    required: boolean\r\n    autoFix: boolean\r\n  }\r\n  testing: {\r\n    required: boolean\r\n    types: string[]\r\n  }\r\n  security: {\r\n    scanRequired: boolean\r\n    tools: string[]\r\n  }\r\n}\r\n\r\nexport interface AgentBehaviorRules {\r\n  codeGeneration: {\r\n    followPatterns: boolean\r\n    useExistingStyles: boolean\r\n    includeTests: boolean\r\n  }\r\n  fileModification: {\r\n    backupFirst: boolean\r\n    formatAfter: boolean\r\n    runLinter: boolean\r\n  }\r\n  documentation: {\r\n    updateReadme: boolean\r\n    includeComments: boolean\r\n    generateChangelog: boolean\r\n  }\r\n}\r\n\r\nexport class IntelligentRulesGenerator {\r\n  private logger: Logger\r\n  private projectPath: string\r\n\r\n  constructor(logger: Logger, projectPath: string = process.cwd()) {\r\n    this.logger = logger\r\n    this.projectPath = projectPath\r\n  }\r\n\r\n  /**\r\n   * Generate complete set of project rules based on analysis\r\n   */\r\n  async generateProjectRules(analysis: ProjectAnalysis): Promise<TazzRules> {\r\n    this.logger.info('Generating intelligent project rules', {\r\n      projectType: analysis.structure.type,\r\n      language: analysis.technologies.language\r\n    })\r\n\r\n    try {\r\n      const rules: TazzRules = {\r\n        codeStyle: await this.generateCodeStyleRules(analysis),\r\n        testing: await this.generateTestingRules(analysis),\r\n        gitWorkflow: await this.generateGitRules(analysis),\r\n        qualityGates: await this.generateQualityGates(analysis),\r\n        agentBehavior: await this.generateAgentRules(analysis)\r\n      }\r\n\r\n      // Write rules to .tazz/rules/\r\n      await this.writeRulesToFiles(rules)\r\n      \r\n      this.logger.info('Project rules generated successfully')\r\n      return rules\r\n    } catch (error) {\r\n      this.logger.error('Failed to generate project rules', error)\r\n      throw new RulesGenerationError('Rules generation failed', {\r\n        projectPath: this.projectPath\r\n      }, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate code style rules based on detected patterns\r\n   */\r\n  private async generateCodeStyleRules(analysis: ProjectAnalysis): Promise<CodeStyleRules> {\r\n    const language = analysis.technologies.language\r\n    const framework = analysis.technologies.framework\r\n    const patterns = analysis.patterns\r\n\r\n    const rules = new Map<string, string>()\r\n    const examples = new Map<string, string>()\r\n\r\n    // Language-specific rules\r\n    switch (language) {\r\n      case 'typescript':\r\n        rules.set('types', 'Use explicit types for function parameters and return values')\r\n        rules.set('imports', 'Prefer absolute imports from src/ directory')\r\n        rules.set('interfaces', 'Use interfaces for object shapes, types for unions/primitives')\r\n        examples.set('function', 'function processData(input: string): ProcessedData { ... }')\r\n        examples.set('import', \"import { utils } from '@/utils'\")\r\n        break\r\n        \r\n      case 'javascript':\r\n        rules.set('functions', 'Use const for function declarations when possible')\r\n        rules.set('destructuring', 'Use destructuring for object properties')\r\n        examples.set('function', 'const processData = (input) => { ... }')\r\n        break\r\n        \r\n      case 'python':\r\n        rules.set('naming', 'Use snake_case for variables and functions')\r\n        rules.set('docstrings', 'Include docstrings for all public functions')\r\n        examples.set('function', 'def process_data(input_str: str) -> ProcessedData:')\r\n        break\r\n    }\r\n\r\n    // Framework-specific rules\r\n    if (framework === 'react') {\r\n      rules.set('components', 'Use functional components with hooks')\r\n      rules.set('props', 'Destructure props in component signature')\r\n      examples.set('component', 'const MyComponent: React.FC<Props> = ({ title, children }) => ...')\r\n    }\r\n\r\n    // Pattern-based rules\r\n    if (patterns.common.includes('async-await')) {\r\n      rules.set('async', 'Use async/await instead of .then() chains')\r\n      examples.set('async', 'const data = await fetchData() instead of fetchData().then()')\r\n    }\r\n\r\n    if (patterns.common.includes('error-handling')) {\r\n      rules.set('errors', 'Wrap async operations in try-catch with proper error types')\r\n      examples.set('error', 'try { await riskyOperation() } catch (error: OperationError) { ... }')\r\n    }\r\n\r\n    return {\r\n      language,\r\n      formatter: this.detectFormatter(analysis),\r\n      linter: this.detectLinter(analysis),\r\n      rules: Object.fromEntries(rules),\r\n      examples: Object.fromEntries(examples),\r\n      patterns: patterns.common\r\n    }\r\n  }\r\n\r\n  private detectFormatter(analysis: ProjectAnalysis): string | undefined {\r\n    if (analysis.quality.formatting) {\r\n      if (analysis.technologies.language === 'python') return 'black'\r\n      return 'prettier'\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  private detectLinter(analysis: ProjectAnalysis): string | undefined {\r\n    if (analysis.quality.linting) {\r\n      switch (analysis.technologies.language) {\r\n        case 'typescript':\r\n        case 'javascript':\r\n          return 'eslint'\r\n        case 'python':\r\n          return 'pylint'\r\n        default:\r\n          return 'generic'\r\n      }\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  /**\r\n   * Generate testing rules based on existing setup\r\n   */\r\n  private async generateTestingRules(analysis: ProjectAnalysis): Promise<TestingRules> {\r\n    const testingStrategy = analysis.testingStrategy\r\n    const framework = testingStrategy.framework || this.inferTestingFramework(analysis)\r\n\r\n    return {\r\n      framework,\r\n      testLocation: testingStrategy.testDirectories[0] || 'tests/',\r\n      namingConvention: this.detectTestNaming(analysis),\r\n      coverage: {\r\n        minimum: testingStrategy.coverage?.threshold || 80,\r\n        enforce: testingStrategy.coverage?.configured || false\r\n      },\r\n      patterns: {\r\n        unit: await this.generateUnitTestPatterns(analysis),\r\n        integration: await this.generateIntegrationTestPatterns(analysis),\r\n        e2e: await this.generateE2ETestPatterns(analysis)\r\n      },\r\n      templates: await this.generateTestTemplates(analysis)\r\n    }\r\n  }\r\n\r\n  private inferTestingFramework(analysis: ProjectAnalysis): string {\r\n    const language = analysis.technologies.language\r\n    \r\n    switch (language) {\r\n      case 'typescript':\r\n      case 'javascript':\r\n        return 'vitest' // Modern default\r\n      case 'python':\r\n        return 'pytest'\r\n      case 'go':\r\n        return 'go test'\r\n      case 'rust':\r\n        return 'cargo test'\r\n      default:\r\n        return 'generic'\r\n    }\r\n  }\r\n\r\n  private detectTestNaming(analysis: ProjectAnalysis): string {\r\n    const hasSpecFiles = analysis.testingStrategy.testDirectories.some(dir => \r\n      dir.includes('spec')\r\n    )\r\n    \r\n    return hasSpecFiles ? '*.spec.*' : '*.test.*'\r\n  }\r\n\r\n  private async generateUnitTestPatterns(analysis: ProjectAnalysis): Promise<string[]> {\r\n    const patterns = [\r\n      'Test individual functions in isolation',\r\n      'Mock external dependencies',\r\n      'Use descriptive test names that explain the scenario'\r\n    ]\r\n\r\n    if (analysis.technologies.framework === 'react') {\r\n      patterns.push('Test component behavior, not implementation details')\r\n      patterns.push('Use React Testing Library for component tests')\r\n    }\r\n\r\n    return patterns\r\n  }\r\n\r\n  private async generateIntegrationTestPatterns(analysis: ProjectAnalysis): Promise<string[]> {\r\n    const patterns = [\r\n      'Test interactions between modules',\r\n      'Use real dependencies where possible'\r\n    ]\r\n\r\n    if (analysis.structure.hasAPI) {\r\n      patterns.push('Test API endpoints with real database')\r\n      patterns.push('Validate request/response schemas')\r\n    }\r\n\r\n    return patterns\r\n  }\r\n\r\n  private async generateE2ETestPatterns(analysis: ProjectAnalysis): Promise<string[]> {\r\n    const patterns = []\r\n\r\n    if (analysis.structure.hasFrontend) {\r\n      patterns.push('Test complete user workflows')\r\n      patterns.push('Use page object pattern for maintainability')\r\n      patterns.push('Test critical user paths first')\r\n    }\r\n\r\n    return patterns\r\n  }\r\n\r\n  private async generateTestTemplates(analysis: ProjectAnalysis): Promise<Partial<TestingRules['templates']>> {\r\n    const templates: Partial<TestingRules['templates']> = {}\r\n\r\n    // Generate unit test template\r\n    templates.unit = await this.createUnitTestTemplate(analysis)\r\n\r\n    // Generate integration test template if API detected\r\n    if (analysis.structure.hasAPI) {\r\n      templates.integration = await this.createIntegrationTestTemplate(analysis)\r\n    }\r\n\r\n    // Generate E2E test template if frontend detected  \r\n    if (analysis.structure.hasFrontend) {\r\n      templates.e2e = await this.createE2ETestTemplate(analysis)\r\n    }\r\n\r\n    return templates\r\n  }\r\n\r\n  private async createUnitTestTemplate(analysis: ProjectAnalysis): Promise<string> {\r\n    const language = analysis.technologies.language\r\n    const framework = analysis.testingStrategy.framework || this.inferTestingFramework(analysis)\r\n\r\n    switch (language) {\r\n      case 'typescript':\r\n      case 'javascript':\r\n        return this.createJSUnitTestTemplate(framework, analysis)\r\n      case 'python':\r\n        return this.createPythonUnitTestTemplate()\r\n      default:\r\n        return this.createGenericUnitTestTemplate()\r\n    }\r\n  }\r\n\r\n  private createJSUnitTestTemplate(framework: string, analysis: ProjectAnalysis): string {\r\n    const isReact = analysis.technologies.framework === 'react'\r\n    \r\n    let template = `import { describe, it, expect, beforeEach } from '${framework}'`\r\n    \r\n    if (isReact) {\r\n      template += `\\nimport { render, screen } from '@testing-library/react'`\r\n    }\r\n    \r\n    template += `\\nimport { {{COMPONENT_NAME}} } from '../src/{{COMPONENT_PATH}}'\r\n\r\ndescribe('{{COMPONENT_NAME}}', () => {\r\n  beforeEach(() => {\r\n    // Setup test data and mocks\r\n  })\r\n\r\n  it('should {{TEST_DESCRIPTION}}', async () => {\r\n    // Arrange\r\n    const input = {{TEST_INPUT}}\r\n\r\n    // Act  \r\n    const result = {{COMPONENT_NAME}}(input)\r\n\r\n    // Assert\r\n    expect(result).{{ASSERTION}}\r\n  })\r\n\r\n  it('should handle error cases', () => {\r\n    // Test error scenarios\r\n  })\r\n})`\r\n\r\n    return template\r\n  }\r\n\r\n  private createPythonUnitTestTemplate(): string {\r\n    return `import pytest\r\nfrom unittest.mock import Mock, patch\r\nfrom src.{{MODULE_NAME}} import {{FUNCTION_NAME}}\r\n\r\nclass Test{{FUNCTION_NAME}}:\r\n    def setup_method(self):\r\n        \\\"\\\"\\\"Setup test data before each test.\\\"\\\"\\\"\r\n        pass\r\n\r\n    def test_{{FUNCTION_NAME}}_success(self):\r\n        \\\"\\\"\\\"Test {{FUNCTION_NAME}} with valid input.\\\"\\\"\\\"\r\n        # Arrange\r\n        input_data = {{TEST_INPUT}}\r\n        \r\n        # Act\r\n        result = {{FUNCTION_NAME}}(input_data)\r\n        \r\n        # Assert\r\n        assert result == {{EXPECTED_OUTPUT}}\r\n\r\n    def test_{{FUNCTION_NAME}}_error(self):\r\n        \\\"\\\"\\\"Test {{FUNCTION_NAME}} error handling.\\\"\\\"\\\"\r\n        with pytest.raises({{EXCEPTION_TYPE}}):\r\n            {{FUNCTION_NAME}}(invalid_input)\r\n`\r\n  }\r\n\r\n  private createGenericUnitTestTemplate(): string {\r\n    return `// Unit test template for {{COMPONENT_NAME}}\r\n// Generated by Tazz CLI\r\n\r\ndescribe('{{COMPONENT_NAME}}', () => {\r\n  // Add your test cases here\r\n})`\r\n  }\r\n\r\n  private async createIntegrationTestTemplate(analysis: ProjectAnalysis): Promise<string> {\r\n    return `// Integration test template for API endpoints\r\nimport request from 'supertest'\r\nimport app from '../src/app'\r\n\r\ndescribe('{{API_ENDPOINT}}', () => {\r\n  beforeEach(async () => {\r\n    // Setup test database\r\n  })\r\n\r\n  afterEach(async () => {\r\n    // Cleanup test data\r\n  })\r\n\r\n  it('should {{ENDPOINT_BEHAVIOR}}', async () => {\r\n    const response = await request(app)\r\n      .{{HTTP_METHOD}}('{{ENDPOINT_PATH}}')\r\n      .send({{REQUEST_BODY}})\r\n      .expect({{EXPECTED_STATUS}})\r\n\r\n    expect(response.body).toMatchObject({{EXPECTED_RESPONSE}})\r\n  })\r\n})`\r\n  }\r\n\r\n  private async createE2ETestTemplate(analysis: ProjectAnalysis): Promise<string> {\r\n    const hasPlaywright = analysis.testingStrategy.e2e?.framework === 'playwright'\r\n    \r\n    if (hasPlaywright) {\r\n      return `import { test, expect } from '@playwright/test'\r\n\r\ntest.describe('{{FEATURE_NAME}}', () => {\r\n  test.beforeEach(async ({ page }) => {\r\n    await page.goto('${analysis.structure.baseURL || 'http://localhost:3000'}')\r\n  })\r\n\r\n  test('should {{TEST_DESCRIPTION}}', async ({ page }) => {\r\n    // Navigate and interact with page\r\n    await page.click('{{SELECTOR}}')\r\n    await page.fill('input[name=\"{{INPUT_NAME}}\"]', '{{TEST_VALUE}}')\r\n    \r\n    // Assert expected results\r\n    await expect(page.locator('{{RESULT_SELECTOR}}')).toHaveText('{{EXPECTED_TEXT}}')\r\n  })\r\n})`\r\n    }\r\n\r\n    return `// E2E test template\r\ndescribe('{{FEATURE_NAME}}', () => {\r\n  it('should complete user workflow', () => {\r\n    // Add E2E test steps\r\n  })\r\n})`\r\n  }\r\n\r\n  /**\r\n   * Generate Git workflow rules\r\n   */\r\n  private async generateGitRules(analysis: ProjectAnalysis): Promise<GitWorkflowRules> {\r\n    return {\r\n      branchNaming: this.detectBranchNamingConvention(analysis),\r\n      commitMessage: {\r\n        format: 'type(scope): description',\r\n        examples: [\r\n          'feat(auth): add OAuth integration',\r\n          'fix(api): resolve timeout issues',\r\n          'docs(readme): update installation guide'\r\n        ]\r\n      },\r\n      pullRequest: {\r\n        template: await this.generatePRTemplate(analysis),\r\n        requirements: [\r\n          'All tests must pass',\r\n          'Code coverage must not decrease',\r\n          'PR description must be filled',\r\n          'At least one approval required'\r\n        ]\r\n      }\r\n    }\r\n  }\r\n\r\n  private detectBranchNamingConvention(analysis: ProjectAnalysis): string {\r\n    // Could analyze existing branches via git MCP\r\n    return 'feature/JIRA-123-description'\r\n  }\r\n\r\n  private async generatePRTemplate(analysis: ProjectAnalysis): string {\r\n    return `## Summary\r\nBrief description of changes\r\n\r\n## Type of Change\r\n- [ ] Bug fix\r\n- [ ] New feature\r\n- [ ] Breaking change\r\n- [ ] Documentation update\r\n\r\n## Testing\r\n- [ ] Unit tests added/updated\r\n- [ ] Integration tests added/updated\r\n- [ ] Manual testing completed\r\n\r\n## Checklist\r\n- [ ] Code follows project style guidelines\r\n- [ ] Self-review completed\r\n- [ ] Documentation updated\r\n- [ ] Tests pass locally`\r\n  }\r\n\r\n  /**\r\n   * Generate quality gate rules\r\n   */\r\n  private async generateQualityGates(analysis: ProjectAnalysis): Promise<QualityGateRules> {\r\n    return {\r\n      coverage: {\r\n        minimum: analysis.quality.coverageThreshold || 80,\r\n        failOnDecrease: analysis.quality.hasQualityGates\r\n      },\r\n      linting: {\r\n        required: analysis.quality.linting,\r\n        autoFix: true\r\n      },\r\n      testing: {\r\n        required: analysis.testingStrategy.hasTests,\r\n        types: this.getRequiredTestTypes(analysis)\r\n      },\r\n      security: {\r\n        scanRequired: analysis.quality.hasQualityGates,\r\n        tools: this.getSecurityTools(analysis)\r\n      }\r\n    }\r\n  }\r\n\r\n  private getRequiredTestTypes(analysis: ProjectAnalysis): string[] {\r\n    const types = ['unit']\r\n    \r\n    if (analysis.structure.hasAPI) types.push('integration')\r\n    if (analysis.structure.hasFrontend) types.push('e2e')\r\n    \r\n    return types\r\n  }\r\n\r\n  private getSecurityTools(analysis: ProjectAnalysis): string[] {\r\n    const tools: string[] = []\r\n    \r\n    if (analysis.technologies.language === 'javascript' || analysis.technologies.language === 'typescript') {\r\n      tools.push('npm audit')\r\n    }\r\n    \r\n    if (analysis.quality.hasQualityGates) {\r\n      tools.push('sonarcloud')\r\n    }\r\n    \r\n    return tools\r\n  }\r\n\r\n  /**\r\n   * Generate agent behavior rules\r\n   */\r\n  private async generateAgentRules(analysis: ProjectAnalysis): Promise<AgentBehaviorRules> {\r\n    return {\r\n      codeGeneration: {\r\n        followPatterns: true,\r\n        useExistingStyles: true,\r\n        includeTests: analysis.testingStrategy.hasTests\r\n      },\r\n      fileModification: {\r\n        backupFirst: true,\r\n        formatAfter: analysis.quality.formatting,\r\n        runLinter: analysis.quality.linting\r\n      },\r\n      documentation: {\r\n        updateReadme: true,\r\n        includeComments: analysis.technologies.language === 'python', // Python emphasizes docstrings\r\n        generateChangelog: analysis.quality.hasQualityGates\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write all rules to separate files\r\n   */\r\n  private async writeRulesToFiles(rules: TazzRules): Promise<void> {\r\n    const projectTazzDir = getProjectTazzDir(this.projectPath)\r\n    const rulesDir = join(projectTazzDir, 'rules')\r\n    await ensureDir(rulesDir)\r\n\r\n    // Write each rule category to its own file\r\n    await Promise.all([\r\n      this.writeRuleFile(join(rulesDir, 'code-style.json'), rules.codeStyle),\r\n      this.writeRuleFile(join(rulesDir, 'testing.json'), rules.testing),\r\n      this.writeRuleFile(join(rulesDir, 'git-workflow.json'), rules.gitWorkflow),\r\n      this.writeRuleFile(join(rulesDir, 'quality-gates.json'), rules.qualityGates),\r\n      this.writeRuleFile(join(rulesDir, 'agent-behavior.json'), rules.agentBehavior),\r\n    ])\r\n\r\n    // Write combined rules file\r\n    await this.writeRuleFile(join(rulesDir, 'all-rules.json'), rules)\r\n\r\n    this.logger.info('Rules files written', { rulesDir })\r\n  }\r\n\r\n  private async writeRuleFile(path: string, content: any): Promise<void> {\r\n    await ensureFile(path)\r\n    await writeFile(path, JSON.stringify(content, null, 2))\r\n  }\r\n\r\n  /**\r\n   * Generate hook scripts for Claude Code integration\r\n   */\r\n  async generateHookScripts(analysis: ProjectAnalysis): Promise<void> {\r\n    this.logger.info('Generating Claude Code hook scripts')\r\n\r\n    const projectTazzDir = getProjectTazzDir(this.projectPath)\r\n    const hooksDir = join(projectTazzDir, 'hooks')\r\n    await ensureDir(hooksDir)\r\n\r\n    // Generate different types of hooks\r\n    await Promise.all([\r\n      this.generateSessionStartHook(hooksDir, analysis),\r\n      this.generatePreToolHook(hooksDir, analysis),\r\n      this.generatePostToolHook(hooksDir, analysis),\r\n      this.generateQualityGateHook(hooksDir, analysis),\r\n      this.generateJiraIntegrationHook(hooksDir, analysis)\r\n    ])\r\n\r\n    this.logger.info('Hook scripts generated', { hooksDir })\r\n  }\r\n\r\n  private async generateSessionStartHook(hooksDir: string, analysis: ProjectAnalysis): Promise<void> {\r\n    const script = `#!/bin/bash\r\n# Auto-generated session start hook for ${analysis.structure.type} project\r\n\r\nSESSION_ID=\"$1\"\r\nTASK_DESCRIPTION=\"$2\"\r\n\r\necho \"\uD83C\uDF00 Starting Tazz session: $SESSION_ID\"\r\n\r\n# Set session environment\r\nexport TAZZ_SESSION_ID=\"$SESSION_ID\"\r\nexport TAZZ_ACTIVE=\"true\"\r\nexport TAZZ_PROJECT_TYPE=\"${analysis.structure.type}\"\r\nexport TAZZ_LANGUAGE=\"${analysis.technologies.language}\"\r\n\r\n# Initialize session context\r\ntazz context set --session \"$SESSION_ID\" --task \"$TASK_DESCRIPTION\"\r\n\r\n# Load project rules\r\ntazz rules load --session \"$SESSION_ID\"\r\n\r\n# Setup development environment\r\n${this.getEnvSetupCommands(analysis)}\r\n\r\necho \"\u2705 Session $SESSION_ID ready\"\r\n`\r\n\r\n    await this.writeExecutableScript(join(hooksDir, 'session-start.sh'), script)\r\n  }\r\n\r\n  private async generatePreToolHook(hooksDir: string, analysis: ProjectAnalysis): Promise<void> {\r\n    const script = `#!/bin/bash\r\n# Pre-tool execution hook\r\n\r\nTOOL_NAME=\"$1\"\r\nTOOL_PARAMS=\"$2\"\r\n\r\nif [[ \"$TAZZ_ACTIVE\" == \"true\" ]]; then\r\n    CURRENT_SESSION=$(tazz current-session)\r\n    \r\n    if [[ -n \"$CURRENT_SESSION\" ]]; then\r\n        # Log tool usage\r\n        tazz log tool-use --session \"$CURRENT_SESSION\" --tool \"$TOOL_NAME\"\r\n        \r\n        # Validate against project rules\r\n        tazz validate --session \"$CURRENT_SESSION\" --tool \"$TOOL_NAME\" --params \"$TOOL_PARAMS\"\r\n        \r\n        # Pre-execution setup\r\n        case \"$TOOL_NAME\" in\r\n            \"Edit\"|\"Write\")\r\n                tazz backup --session \"$CURRENT_SESSION\"\r\n                ;;\r\n            \"Bash\")\r\n                tazz safety-check --session \"$CURRENT_SESSION\" --command \"$TOOL_PARAMS\"\r\n                ;;\r\n        esac\r\n    fi\r\nfi\r\n`\r\n\r\n    await this.writeExecutableScript(join(hooksDir, 'pre-tool.sh'), script)\r\n  }\r\n\r\n  private async generatePostToolHook(hooksDir: string, analysis: ProjectAnalysis): Promise<void> {\r\n    const formatCommand = analysis.quality.formatting ? this.getFormatCommand(analysis) : 'echo \"No formatting configured\"'\r\n    const lintCommand = analysis.quality.linting ? this.getLintCommand(analysis) : 'echo \"No linting configured\"'\r\n\r\n    const script = `#!/bin/bash\r\n# Post-tool execution hook\r\n\r\nTOOL_NAME=\"$1\"\r\nTOOL_RESULT=\"$2\"\r\n\r\nif [[ \"$TAZZ_ACTIVE\" == \"true\" ]]; then\r\n    CURRENT_SESSION=$(tazz current-session)\r\n    \r\n    if [[ -n \"$CURRENT_SESSION\" ]]; then\r\n        case \"$TOOL_NAME\" in\r\n            \"Edit\"|\"Write\")\r\n                # Format code\r\n                ${formatCommand}\r\n                \r\n                # Run linting\r\n                ${lintCommand}\r\n                ;;\r\n            \"Bash\")\r\n                tazz log command-result --session \"$CURRENT_SESSION\" --result \"$TOOL_RESULT\"\r\n                ;;\r\n        esac\r\n        \r\n        # Update task progress\r\n        tazz task update --session \"$CURRENT_SESSION\"\r\n        \r\n        # Auto-commit if configured\r\n        if tazz config get auto-commit --session \"$CURRENT_SESSION\"; then\r\n            tazz commit --session \"$CURRENT_SESSION\" --auto\r\n        fi\r\n    fi\r\nfi\r\n`\r\n\r\n    await this.writeExecutableScript(join(hooksDir, 'post-tool.sh'), script)\r\n  }\r\n\r\n  private async generateQualityGateHook(hooksDir: string, analysis: ProjectAnalysis): Promise<void> {\r\n    const testCommand = this.getTestCommand(analysis)\r\n    const coverageCommand = this.getCoverageCommand(analysis)\r\n\r\n    const script = `#!/bin/bash\r\n# Quality gate hook\r\n\r\nSESSION_ID=\"$1\"\r\n\r\necho \"\uD83D\uDD0D Running quality gates for session $SESSION_ID\"\r\n\r\n# Run tests\r\nif ! ${testCommand}; then\r\n    tazz task mark-blocked --session \"$SESSION_ID\" --reason \"Tests failing\"\r\n    exit 1\r\nfi\r\n\r\n# Check coverage\r\nCOVERAGE=$(${coverageCommand})\r\nMIN_COVERAGE=${analysis.quality.coverageThreshold || 80}\r\n\r\nif (( $(echo \"$COVERAGE < $MIN_COVERAGE\" | bc -l) )); then\r\n    tazz task mark-blocked --session \"$SESSION_ID\" --reason \"Coverage below $MIN_COVERAGE%\"\r\n    exit 1\r\nfi\r\n\r\necho \"\u2705 Quality gates passed for session $SESSION_ID\"\r\n`\r\n\r\n    await this.writeExecutableScript(join(hooksDir, 'quality-gate.sh'), script)\r\n  }\r\n\r\n  private async generateJiraIntegrationHook(hooksDir: string, analysis: ProjectAnalysis): Promise<void> {\r\n    const script = `#!/bin/bash\r\n# Jira integration hook\r\n\r\nSESSION_ID=\"$1\"\r\nTASK_TYPE=\"$2\"\r\n\r\nif [[ \"$SESSION_ID\" =~ ^[A-Z]+-[0-9]+$ ]]; then\r\n    echo \"\uD83C\uDFAB Fetching Jira ticket: $SESSION_ID\"\r\n    \r\n    # Use Atlassian MCP to fetch ticket details\r\n    TICKET_INFO=$(tazz mcp call atlassian jira_get_issue --issue-key \"$SESSION_ID\")\r\n    \r\n    # Extract task information\r\n    TITLE=$(echo \"$TICKET_INFO\" | jq -r '.fields.summary')\r\n    DESCRIPTION=$(echo \"$TICKET_INFO\" | jq -r '.fields.description')\r\n    PRIORITY=$(echo \"$TICKET_INFO\" | jq -r '.fields.priority.name')\r\n    \r\n    # Update session context\r\n    tazz context set --session \"$SESSION_ID\" \\\\\r\n        --title \"$TITLE\" \\\\\r\n        --description \"$DESCRIPTION\" \\\\\r\n        --priority \"$PRIORITY\"\r\n        \r\n    # Set branch naming convention  \r\n    BRANCH_NAME=$(echo \"$TITLE\" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g')\r\n    tazz git set-branch --session \"$SESSION_ID\" --name \"feature/$SESSION_ID-$BRANCH_NAME\"\r\n    \r\n    echo \"\u2705 Jira integration complete for $SESSION_ID\"\r\nfi\r\n`\r\n\r\n    await this.writeExecutableScript(join(hooksDir, 'jira-integration.sh'), script)\r\n  }\r\n\r\n  private getEnvSetupCommands(analysis: ProjectAnalysis): string {\r\n    const commands: string[] = []\r\n\r\n    if (analysis.technologies.language === 'javascript' || analysis.technologies.language === 'typescript') {\r\n      commands.push('# Ensure dependencies are installed')\r\n      commands.push('if [[ ! -d \"node_modules\" ]]; then npm install; fi')\r\n    }\r\n\r\n    if (analysis.technologies.language === 'python') {\r\n      commands.push('# Activate virtual environment if exists')\r\n      commands.push('if [[ -d \"venv\" ]]; then source venv/bin/activate; fi')\r\n    }\r\n\r\n    return commands.join('\\n')\r\n  }\r\n\r\n  private getFormatCommand(analysis: ProjectAnalysis): string {\r\n    if (analysis.technologies.language === 'python') {\r\n      return 'black . || echo \"Formatting skipped\"'\r\n    }\r\n    return 'npx prettier --write . || echo \"Formatting skipped\"'\r\n  }\r\n\r\n  private getLintCommand(analysis: ProjectAnalysis): string {\r\n    switch (analysis.technologies.language) {\r\n      case 'typescript':\r\n      case 'javascript':\r\n        return 'npx eslint --fix . || echo \"Linting skipped\"'\r\n      case 'python':\r\n        return 'pylint . || echo \"Linting skipped\"'\r\n      default:\r\n        return 'echo \"No linting configured\"'\r\n    }\r\n  }\r\n\r\n  private getTestCommand(analysis: ProjectAnalysis): string {\r\n    const framework = analysis.testingStrategy.framework\r\n\r\n    switch (framework) {\r\n      case 'jest':\r\n        return 'npm test'\r\n      case 'vitest':\r\n        return 'npx vitest run'\r\n      case 'pytest':\r\n        return 'python -m pytest'\r\n      case 'go test':\r\n        return 'go test ./...'\r\n      case 'cargo test':\r\n        return 'cargo test'\r\n      default:\r\n        return 'echo \"No test command configured\"'\r\n    }\r\n  }\r\n\r\n  private getCoverageCommand(analysis: ProjectAnalysis): string {\r\n    const framework = analysis.testingStrategy.framework\r\n\r\n    switch (framework) {\r\n      case 'jest':\r\n        return 'npm test -- --coverage --silent | grep \"All files\" | awk \\'{print $10}\\' | sed \\'s/%//\\''\r\n      case 'vitest':\r\n        return 'npx vitest run --coverage --silent | grep \"All files\" | awk \\'{print $4}\\' | sed \\'s/%//\\''\r\n      case 'pytest':\r\n        return 'python -m pytest --cov=. --cov-report=term-missing | grep TOTAL | awk \\'{print $4}\\' | sed \\'s/%//\\''\r\n      default:\r\n        return 'echo \"0\"'\r\n    }\r\n  }\r\n\r\n  private async writeExecutableScript(path: string, content: string): Promise<void> {\r\n    await ensureFile(path)\r\n    await writeFile(path, content)\r\n    \r\n    // Make script executable\r\n    const fs = await import('fs')\r\n    await fs.promises.chmod(path, 0o755)\r\n  }\r\n}", "import { Command } from 'commander'\r\nimport chalk from 'chalk'\r\nimport { spawn } from 'child_process'\r\nimport { pathExists, readFile, writeFile, ensureFile } from 'fs-extra'\r\nimport { join } from 'path'\r\nimport { getLogger } from '../../utils/logger'\r\n\r\nexport class NoteCommand {\r\n  private logger = getLogger()\r\n\r\n  build(): Command {\r\n    return new Command('note')\r\n      .description('\uD83D\uDCDD Open editor to create/edit tasks and prompts')\r\n      .option('-e, --editor <editor>', 'Specify editor (code, vim, nano)', 'code')\r\n      .option('-t, --template <type>', 'Use template (task, prompt, session)', 'task')\r\n      .action(async (options) => {\r\n        await this.execute(options)\r\n      })\r\n  }\r\n\r\n  async execute(options: {\r\n    editor?: string\r\n    template?: string\r\n  } = {}): Promise<void> {\r\n    console.log('')\r\n    console.log(chalk.bold.cyan('\uD83D\uDCDD Tazz Note Editor'))\r\n    console.log(chalk.gray('Creating/editing tasks and prompts...'))\r\n    console.log('')\r\n\r\n    const projectPath = process.cwd()\r\n    const notesDir = join(projectPath, '.tazz')\r\n    \r\n    // Ensure .tazz directory exists\r\n    if (!await pathExists(notesDir)) {\r\n      console.log(chalk.yellow('\u26A0\uFE0F  Project not initialized with Tazz'))\r\n      console.log(chalk.gray('Run'), chalk.cyan('tazz make'), chalk.gray('first to set up the project'))\r\n      return\r\n    }\r\n\r\n    const notesFile = join(notesDir, 'tazz-todo.md')\r\n    \r\n    try {\r\n      // Ensure the notes file exists with template content\r\n      await this.ensureNotesFile(notesFile, options.template || 'task')\r\n      \r\n      // Open in specified editor\r\n      await this.openInEditor(notesFile, options.editor || 'code')\r\n      \r\n      console.log('')\r\n      console.log(chalk.green('\u2705 Notes file ready for editing'))\r\n      console.log(chalk.gray('File:'), chalk.cyan(notesFile))\r\n      console.log('')\r\n      console.log(chalk.bold('Next steps:'))\r\n      console.log(chalk.gray('\u2022 Edit your tasks and prompts'))\r\n      console.log(chalk.gray('\u2022 Run'), chalk.cyan('tazz run <session-name>'), chalk.gray('to start working'))\r\n      console.log('')\r\n      \r\n    } catch (error) {\r\n      this.logger.error('Failed to open notes editor', error as Error)\r\n      console.log(chalk.red('\u274C Failed to open editor'))\r\n      console.log(chalk.gray('Try specifying a different editor with --editor'))\r\n    }\r\n  }\r\n\r\n  private async ensureNotesFile(filePath: string, template: string): Promise<void> {\r\n    await ensureFile(filePath)\r\n    \r\n    // Check if file is empty or doesn't exist\r\n    let content = ''\r\n    try {\r\n      content = await readFile(filePath, 'utf-8')\r\n    } catch {\r\n      // File doesn't exist, will create with template\r\n    }\r\n\r\n    if (!content.trim()) {\r\n      const templateContent = this.getTemplate(template)\r\n      await writeFile(filePath, templateContent)\r\n      this.logger.info('Created notes file with template', { template, filePath })\r\n    }\r\n  }\r\n\r\n  private getTemplate(templateType: string): string {\r\n    switch (templateType) {\r\n      case 'prompt':\r\n        return `# Tazz Development Prompt\r\n\r\n## Context\r\nDescribe the current state and what you're working on...\r\n\r\n## Goal\r\nWhat do you want to achieve?\r\n\r\n## Tasks\r\n- [ ] Task 1: Specific actionable item\r\n- [ ] Task 2: Another specific task\r\n- [ ] Task 3: Final task\r\n\r\n## Constraints\r\n- Technical constraints\r\n- Time constraints  \r\n- Requirements to consider\r\n\r\n## Success Criteria\r\n- [ ] How will you know you're done?\r\n- [ ] What should be tested?\r\n- [ ] What documentation is needed?\r\n\r\n## Notes\r\nAdd any additional context, links, or references...\r\n`\r\n\r\n      case 'session':\r\n        return `# Tazz Session Plan\r\n\r\n## Session: [SESSION-NAME]\r\nBrief description of this development session...\r\n\r\n## Epic/Feature\r\nLink to larger epic or feature this belongs to...\r\n\r\n## User Story\r\nAs a [user type], I want [functionality] so that [benefit]...\r\n\r\n## Acceptance Criteria\r\n- [ ] Criterion 1\r\n- [ ] Criterion 2\r\n- [ ] Criterion 3\r\n\r\n## Development Tasks\r\n- [ ] Setup/configuration\r\n- [ ] Core implementation\r\n- [ ] Testing\r\n- [ ] Documentation\r\n- [ ] Code review\r\n\r\n## Technical Notes\r\n- Architecture decisions\r\n- Dependencies\r\n- Integration points\r\n\r\n## Definition of Done\r\n- [ ] Code complete\r\n- [ ] Tests passing\r\n- [ ] Peer reviewed\r\n- [ ] Documentation updated\r\n`\r\n\r\n      default: // 'task'\r\n        return `# Tazz Task Template\r\n\r\n## Session Tasks\r\n- [ ] Task 1: Complete implementation\r\n      Session name: task-1\r\n      Description: \r\n        Implement the main functionality for this feature. This context will be passed to the Claude instance in the tmux session.\r\n\r\n- [ ] Task 2: Write tests\r\n      Session name: task-2\r\n      Description: \r\n        Create comprehensive tests for the implemented functionality. Focus on unit tests and integration tests.\r\n\r\n- [ ] Task 3: Update documentation\r\n      Session name: task-3\r\n      Description: \r\n        Update relevant documentation including README, API docs, and inline comments.\r\n\r\n- [ ] Task 4: Code review preparation\r\n      Session name: task-4\r\n      Description: \r\n        Prepare code for review, run linting, fix any issues, and ensure quality standards are met.\r\n\r\n## In Progress\r\n- [ ] Current task being worked on...\r\n      Session name: current-task\r\n      Description: \r\n        Description of what is currently being implemented or debugged.\r\n\r\n## Blocked\r\n- [ ] Task waiting for dependency\r\n      Session name: blocked-task\r\n      Description: \r\n        Describe what is blocking this task and what needs to be resolved.\r\n\r\n## Quality Checklist\r\n- [ ] Code follows project patterns\r\n- [ ] Tests pass locally\r\n- [ ] Coverage meets threshold\r\n- [ ] Code reviewed\r\n- [ ] Documentation updated\r\n\r\n## Session Notes\r\nAdd notes about current session, decisions made, next steps...\r\n\r\n## Quick Commands\r\n\\`\\`\\`bash\r\n# Run all tasks (creates separate tmux sessions)\r\ntazz run instance-name\r\n\r\n# Join specific task session\r\ntazz join instance-name task-1\r\n\r\n# List all active sessions\r\ntazz list\r\n\r\n# Join main instance session\r\ntazz join instance-name\r\n\\`\\`\\`\r\n`\r\n    }\r\n  }\r\n\r\n  private async openInEditor(filePath: string, editor: string): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const editorCommands: Record<string, string[]> = {\r\n        'code': ['code', filePath],\r\n        'vim': ['vim', filePath],\r\n        'nano': ['nano', filePath],\r\n        'emacs': ['emacs', filePath],\r\n        'subl': ['subl', filePath],\r\n        'atom': ['atom', filePath]\r\n      }\r\n\r\n      const command = editorCommands[editor] || ['code', filePath]\r\n      \r\n      console.log(chalk.gray(`Opening with: ${command.join(' ')}`))\r\n      \r\n      const process = spawn(command[0], command.slice(1), {\r\n        stdio: 'inherit',\r\n        shell: true\r\n      })\r\n\r\n      process.on('close', (code) => {\r\n        if (code === 0) {\r\n          resolve()\r\n        } else {\r\n          reject(new Error(`Editor exited with code ${code}`))\r\n        }\r\n      })\r\n\r\n      process.on('error', (error) => {\r\n        reject(error)\r\n      })\r\n    })\r\n  }\r\n}", "import { Command } from 'commander'\r\nimport chalk from 'chalk'\r\nimport ora from 'ora'\r\nimport { pathExists, readFile } from 'fs-extra'\r\nimport { join } from 'path'\r\nimport { exec } from 'child_process'\r\nimport { promisify } from 'util'\r\nimport { getLogger } from '../../utils/logger'\r\nimport { getTazzDir, getProjectTazzDir } from '../../utils/paths'\r\nimport { TazzAnimation } from '../ui/tornado'\r\nimport { DependencyManager } from '../../utils/dependencies'\r\n\r\nconst execAsync = promisify(exec)\r\n\r\nexport class RunCommand {\r\n  private logger = getLogger()\r\n\r\n  build(): Command {\r\n    return new Command('run')\r\n      .description('\uD83D\uDE80 Start a development session with git worktree and tmux')\r\n      .argument('<instance-name>', 'Instance name (e.g., feature-auth, JIRA-123)')\r\n      .action(async (sessionName: string) => {\r\n        await this.execute(sessionName)\r\n      })\r\n  }\r\n\r\n  async execute(sessionName: string): Promise<void> {\r\n    \r\n    // Show animation\r\n    const animation = new TazzAnimation()\r\n    await animation.show()\r\n\r\n    console.log('')\r\n    console.log(chalk.bold.cyan(`\uD83D\uDE80 Starting session: ${sessionName}`))\r\n    console.log('')\r\n\r\n    try {\r\n      // Check if project is initialized\r\n      await this.checkProjectInitialized()\r\n\r\n      // Ensure dependencies are available\r\n      if (!await DependencyManager.ensureDependencies()) {\r\n        throw new Error('Required dependencies are missing')\r\n      }\r\n\r\n      // Load tasks from notes if available\r\n      const tasks = await this.loadTasks()\r\n      if (tasks.length > 0) {\r\n        console.log(chalk.bold('\uD83D\uDCCB Session Tasks:'))\r\n        tasks.forEach((task, i) => {\r\n          console.log(chalk.gray(`   ${i + 1}.`), chalk.cyan(task.name))\r\n          if (task.description) {\r\n            console.log(chalk.gray(`      ${task.description.substring(0, 80)}...`))\r\n          }\r\n        })\r\n        console.log('')\r\n      }\r\n\r\n      // Create git worktree\r\n      const worktreePath = await this.createWorktree(sessionName)\r\n      \r\n      // Create separate Tazz processes for each task\r\n      if (tasks.length > 0) {\r\n        await this.createTazzProcessesForTasks(sessionName, worktreePath, tasks)\r\n      } else {\r\n        // Fallback: create single session\r\n        await this.createTmuxSession(sessionName, worktreePath, 'Main development session')\r\n      }\r\n\r\n      // Save session info\r\n      await this.saveSessionInfo(sessionName, {\r\n        worktreePath,\r\n        tasks,\r\n        branch: `feature/${sessionName}`,\r\n        createdAt: new Date().toISOString()\r\n      })\r\n\r\n      console.log('')\r\n      console.log(chalk.green('\u2705 Sessions started successfully!'))\r\n      console.log('')\r\n      console.log(chalk.bold('\uD83D\uDCCD Session Details:'))\r\n      console.log(chalk.gray('   Instance:'), chalk.cyan(sessionName))\r\n      console.log(chalk.gray('   Worktree:'), chalk.cyan(worktreePath))\r\n      \r\n      if (tasks.length > 0) {\r\n        console.log(chalk.gray('   Tazz Processes:'))\r\n        tasks.forEach((task, i) => {\r\n          const taskSessionName = task.sessionName || `task${i + 1}`\r\n          const fullSessionId = `${sessionName}_${taskSessionName}`\r\n          console.log(chalk.gray(`     ${i + 1}.`), chalk.cyan(fullSessionId), chalk.gray(`(${task.name})`))\r\n        })\r\n      } else {\r\n        console.log(chalk.gray('   Tmux Session:'), chalk.cyan(`tazz_${sessionName}`))\r\n      }\r\n      \r\n      console.log('')\r\n      console.log(chalk.bold('\uD83D\uDD17 Next Steps:'))\r\n      if (tasks.length > 0) {\r\n        console.log(chalk.gray(`\u2022 ${tasks.length} separate Tazz processes created (detached)`))\r\n        const firstTaskSessionName = tasks[0]?.sessionName || 'task1'\r\n        const firstFullSessionId = `${sessionName}_${firstTaskSessionName}`\r\n        console.log(chalk.gray('\u2022 Join specific process:'), chalk.cyan(`tazz join ${firstFullSessionId}`))\r\n        console.log(chalk.gray('\u2022 List all processes:'), chalk.cyan('tazz list'))\r\n        console.log(chalk.gray('\u2022 Delete a process:'), chalk.cyan(`tazz delete ${firstFullSessionId}`))\r\n      } else {\r\n        console.log(chalk.gray('\u2022 Session created (detached)'))\r\n        console.log(chalk.gray('\u2022 Join session:'), chalk.cyan(`tazz join ${sessionName}`))\r\n        console.log(chalk.gray('\u2022 List all sessions:'), chalk.cyan('tazz list'))\r\n      }\r\n      console.log(chalk.gray('\u2022 Edit tasks:'), chalk.cyan('tazz note'))\r\n      console.log('')\r\n\r\n    } catch (error) {\r\n      this.logger.error('Session creation failed', error as Error, { sessionName })\r\n      console.log('')\r\n      console.log(chalk.red('\u274C Failed to start session'))\r\n      console.log(chalk.red(`   ${(error as Error).message}`))\r\n      \r\n      // Provide helpful suggestions\r\n      if ((error as Error).message.includes('dependencies')) {\r\n        console.log('')\r\n        console.log(chalk.yellow('\uD83D\uDCA1 Suggestions:'))\r\n        console.log(chalk.gray('   \u2022 Install dependencies:'), chalk.cyan('tazz health --fix'))\r\n        console.log(chalk.gray('   \u2022 Check system status:'), chalk.cyan('tazz health'))\r\n      }\r\n      console.log('')\r\n      process.exit(1)\r\n    }\r\n  }\r\n\r\n  private async checkProjectInitialized(): Promise<void> {\r\n    const tazzDir = join(process.cwd(), '.tazz')\r\n    if (!await pathExists(tazzDir)) {\r\n      throw new Error('Project not initialized. Run \"tazz make\" first.')\r\n    }\r\n  }\r\n\r\n  private async loadTasks(): Promise<Array<{name: string, description: string, sessionName?: string}>> {\r\n\r\n    // Try to load from notes file\r\n    try {\r\n      const notesPath = join(process.cwd(), '.tazz', 'tazz-todo.md')\r\n      if (await pathExists(notesPath)) {\r\n        const content = await readFile(notesPath, 'utf-8')\r\n        const tasks: Array<{name: string, description: string, sessionName?: string}> = []\r\n        \r\n        // Parse tasks with descriptions and session names\r\n        const lines = content.split('\\n')\r\n        let i = 0\r\n        while (i < lines.length) {\r\n          const taskMatch = lines[i].match(/^- \\[ \\] (.+)/)\r\n          if (taskMatch) {\r\n            const taskName = taskMatch[1]\r\n            let description = ''\r\n            let sessionName = ''\r\n            \r\n            // Look for session name and description in next lines\r\n            i++\r\n            while (i < lines.length && lines[i].trim() !== '' && !lines[i].match(/^- \\[ \\]/)) {\r\n              const line = lines[i].trim()\r\n              \r\n              // Check for session name\r\n              const sessionMatch = line.match(/Session name:\\s*(.+)/)\r\n              if (sessionMatch) {\r\n                sessionName = sessionMatch[1].trim()\r\n              }\r\n              \r\n              // Check for description\r\n              if (line === 'Description:') {\r\n                i++\r\n                // Collect description lines until we hit empty line, next task, or session name\r\n                while (i < lines.length && lines[i].trim() !== '' && \r\n                       !lines[i].match(/^- \\[ \\]/) && \r\n                       !lines[i].includes('Session name:')) {\r\n                  description += lines[i].trim() + ' '\r\n                  i++\r\n                }\r\n                i-- // Back up one since we'll increment at end of loop\r\n              }\r\n              i++\r\n            }\r\n            i-- // Back up one since we'll increment at end of outer loop\r\n            \r\n            tasks.push({\r\n              name: taskName,\r\n              description: description.trim() || `Work on: ${taskName}`,\r\n              sessionName: sessionName || taskName.toLowerCase().replace(/[^a-z0-9]/g, '-')\r\n            })\r\n          }\r\n          i++\r\n        }\r\n        \r\n        return tasks.slice(0, 5) // Limit to first 5 tasks\r\n      }\r\n    } catch (error) {\r\n      this.logger.debug('Could not load tasks from notes', error as Error)\r\n    }\r\n\r\n    return []\r\n  }\r\n\r\n  private async createWorktree(sessionName: string): Promise<string> {\r\n    const spinner = ora('Creating git worktree').start()\r\n    \r\n    try {\r\n      const branchName = `feature/${sessionName}`\r\n      const worktreePath = join('..', sessionName)\r\n\r\n      // Create worktree\r\n      await execAsync(`git worktree add ${worktreePath} -b ${branchName}`)\r\n      \r\n      spinner.succeed('Git worktree created')\r\n      return join(process.cwd(), worktreePath)\r\n      \r\n    } catch (error) {\r\n      spinner.fail('Failed to create worktree')\r\n      throw new Error(`Git worktree creation failed: ${(error as Error).message}`)\r\n    }\r\n  }\r\n\r\n  private async createTazzProcessesForTasks(sessionName: string, worktreePath: string, tasks: Array<{name: string, description: string, sessionName?: string}>): Promise<void> {\r\n    const spinner = ora(`Creating ${tasks.length} separate Tazz processes`).start()\r\n    \r\n    try {\r\n      // Create individual Tazz process for each task\r\n      const processPromises = tasks.map(async (task, index) => {\r\n        const taskSessionName = task.sessionName || `task${index + 1}`\r\n        const fullSessionId = `${sessionName}_${taskSessionName}`\r\n        \r\n        // Create tmux session for this specific task\r\n        const tmuxSessionId = `tazz_${fullSessionId}`\r\n        await execAsync(`tmux new-session -d -s ${tmuxSessionId} -c \"${worktreePath}\"`)\r\n        \r\n        // Setup the session with task context\r\n        await this.setupTaskSession(tmuxSessionId, task, fullSessionId)\r\n        \r\n        return {\r\n          taskName: taskSessionName,\r\n          sessionId: fullSessionId,\r\n          tmuxSession: tmuxSessionId,\r\n          task: task\r\n        }\r\n      })\r\n      \r\n      const createdProcesses = await Promise.all(processPromises)\r\n      \r\n      spinner.succeed(`Created ${tasks.length} Tazz processes`)\r\n      return createdProcesses\r\n      \r\n    } catch (error) {\r\n      spinner.fail('Failed to create Tazz processes')\r\n      throw new Error(`Tazz processes creation failed: ${(error as Error).message}`)\r\n    }\r\n  }\r\n\r\n  private async setupTaskSession(tmuxSessionId: string, task: {name: string, description: string}, sessionId: string): Promise<void> {\r\n    // Setup session with task context\r\n    await execAsync(`tmux send-keys -t ${tmuxSessionId} 'clear' Enter`)\r\n    await execAsync(`tmux send-keys -t ${tmuxSessionId} 'echo \"\uD83D\uDE80 Tazz Process: ${sessionId}\"' Enter`)\r\n    await execAsync(`tmux send-keys -t ${tmuxSessionId} 'echo \"\uD83D\uDCC2 Working directory: $(pwd)\"' Enter`)\r\n    await execAsync(`tmux send-keys -t ${tmuxSessionId} 'echo \"\uD83D\uDCDD Task: ${task.name}\"' Enter`)\r\n    \r\n    if (task.description) {\r\n      await execAsync(`tmux send-keys -t ${tmuxSessionId} 'echo \"\uD83D\uDCA1 Context: ${task.description}\"' Enter`)\r\n    }\r\n    \r\n    await execAsync(`tmux send-keys -t ${tmuxSessionId} 'echo \"\"' Enter`)\r\n    await execAsync(`tmux send-keys -t ${tmuxSessionId} 'echo \"This is an independent Tazz process.\"' Enter`)\r\n    await execAsync(`tmux send-keys -t ${tmuxSessionId} 'echo \"Use: tazz join ${sessionId} to attach\"' Enter`)\r\n    await execAsync(`tmux send-keys -t ${tmuxSessionId} 'echo \"Use: tazz list to see all processes\"' Enter`)\r\n    await execAsync(`tmux send-keys -t ${tmuxSessionId} 'echo \"\"' Enter`)\r\n  }\r\n\r\n  private async createTmuxSession(sessionName: string, worktreePath: string, description?: string): Promise<void> {\r\n    const spinner = ora('Creating tmux session').start()\r\n    \r\n    try {\r\n      // tmux should be available now (checked by DependencyManager)\r\n      const sessionId = `tazz_${sessionName}`\r\n      \r\n      // Create detached tmux session\r\n      await execAsync(`tmux new-session -d -s ${sessionId} -c \"${worktreePath}\"`)\r\n      \r\n      // Setup panes\r\n      await execAsync(`tmux send-keys -t ${sessionId} 'clear' Enter`)\r\n      await execAsync(`tmux send-keys -t ${sessionId} 'echo \"\uD83D\uDE80 Tazz Session: ${sessionName}\"' Enter`)\r\n      await execAsync(`tmux send-keys -t ${sessionId} 'echo \"\uD83D\uDCC2 Working directory: $(pwd)\"' Enter`)\r\n      \r\n      if (description) {\r\n        await execAsync(`tmux send-keys -t ${sessionId} 'echo \"\uD83D\uDCA1 Context: ${description}\"' Enter`)\r\n      }\r\n      \r\n      await execAsync(`tmux send-keys -t ${sessionId} 'echo \"\uD83D\uDCDD Edit tasks: tazz note\"' Enter`)\r\n      await execAsync(`tmux send-keys -t ${sessionId} 'echo \"\"' Enter`)\r\n      \r\n      spinner.succeed('Tmux session created')\r\n      \r\n    } catch (error) {\r\n      spinner.fail('Failed to create tmux session')\r\n      throw new Error(`Tmux session creation failed: ${(error as Error).message}`)\r\n    }\r\n  }\r\n\r\n  private async attachTmuxSession(sessionName: string): Promise<void> {\r\n    try {\r\n      const sessionId = `tazz_${sessionName}`\r\n      \r\n      // Check if we're already in a tmux session\r\n      if (process.env.TMUX) {\r\n        console.log(chalk.yellow('\u26A0\uFE0F  Already inside a tmux session'))\r\n        console.log(chalk.gray('   Switch to session:'), chalk.cyan(`tmux switch-client -t ${sessionId}`))\r\n        return\r\n      }\r\n      \r\n      // Import spawn to replace current process\r\n      const { spawn } = require('child_process')\r\n      \r\n      // Spawn tmux attach and replace current process\r\n      const tmux = spawn('tmux', ['attach-session', '-t', sessionId], {\r\n        stdio: 'inherit',\r\n        detached: false\r\n      })\r\n      \r\n      // Exit current process when tmux session ends\r\n      tmux.on('exit', (code) => {\r\n        process.exit(code || 0)\r\n      })\r\n      \r\n    } catch (error) {\r\n      console.log(chalk.yellow('\u26A0\uFE0F  Could not attach to tmux session'))\r\n      console.log(chalk.gray('   Attach manually:'), chalk.cyan(`tmux attach-session -t tazz_${sessionName}`))\r\n    }\r\n  }\r\n\r\n  private async saveSessionInfo(sessionName: string, info: any): Promise<void> {\r\n    try {\r\n      const projectTazzDir = getProjectTazzDir(process.cwd())\r\n      const sessionsPath = join(projectTazzDir, 'sessions.json')\r\n      \r\n      let sessions: any = { sessions: [] }\r\n      try {\r\n        const content = await readFile(sessionsPath, 'utf-8')\r\n        sessions = JSON.parse(content)\r\n      } catch {\r\n        // File doesn't exist, start fresh\r\n      }\r\n\r\n      // Add or update session\r\n      const existingIndex = sessions.sessions.findIndex((s: any) => s.id === sessionName)\r\n      const sessionData = {\r\n        id: sessionName,\r\n        ...info,\r\n        status: 'active',\r\n        lastActive: new Date().toISOString()\r\n      }\r\n\r\n      if (existingIndex >= 0) {\r\n        sessions.sessions[existingIndex] = sessionData\r\n      } else {\r\n        sessions.sessions.push(sessionData)\r\n      }\r\n\r\n      sessions.lastUpdated = new Date().toISOString()\r\n\r\n      // We would normally write this, but keeping it simple for now\r\n      this.logger.info('Session info saved', { sessionName, info })\r\n      \r\n    } catch (error) {\r\n      this.logger.warn('Could not save session info', error as Error)\r\n    }\r\n  }\r\n}", "import chalk from 'chalk'\r\n\r\nexport class TazzAnimation {\r\n  private frames: string[] = [\r\n    // Frame 1 - Formation\r\n    `\r\n        .       *        .        *\r\n        .             .    *         .       .\r\n                   @@@\r\n                @@@@@@@\r\n              @@@@#^#@@@@\r\n                @@@@@@@\r\n                  @@@\r\n                   @@\r\n        ___@______________________\r\n .          *          .       *       .      .\r\n     *          .             *        .      *`,\r\n    \r\n    // Frame 2 - Spinning\r\n    `\r\n        \u2728      \uD83C\uDF1F      \u2728\r\n        .             .    \u2B50        .       .\r\n                   @@@\r\n                @@@@@@@\r\n              @@@@#^#@@@@\r\n                @@@@@@@\r\n                  @@@\r\n                   @@\r\n        ___@______________________\r\n .      \uD83D\uDD25  T A Z Z  \uD83D\uDD25   *       .      .\r\n     *          .             *        .      *`,\r\n    \r\n    // Frame 3 - Intensifying\r\n    `\r\n        \u26A1\u2728    \uD83C\uDF1F\uD83D\uDCAB    \u26A1\u2728\r\n        .     \uD83D\uDD25      .    \u2B50\uD83D\uDE80      .       .\r\n                   @@@\r\n                @@@@@@@\r\n              @@@@#^#@@@@\r\n                @@@@@@@\r\n                  @@@\r\n                   @@\r\n        ___@______________________\r\n .    \u26A1\uD83D\uDD25 A G E N T \uD83D\uDD25\u26A1 *       .      .\r\n     *    \uD83D\uDE80    .      \uD83C\uDF1F     *        .    \u2B50`,\r\n\r\n    // Frame 4 - Final\r\n    `\r\n        .       *        .        *\r\n        .             .    *         .       .\r\n                   @@@\r\n                @@@@@@@\r\n              @@@@#^#@@@@\r\n                @@@@@@@\r\n                  @@@\r\n                   @@\r\n        ___@______________________\r\n .          *          .       *       .      .\r\n     *          .             *        .      *`\r\n  ]\r\n\r\n  async show(): Promise<void> {\r\n    // Clear screen\r\n    process.stdout.write('\\x1b[2J\\x1b[0f')\r\n\r\n    for (let i = 0; i < this.frames.length; i++) {\r\n      // Move cursor to top\r\n      process.stdout.write('\\x1b[H')\r\n      \r\n      // Display frame with color\r\n      const coloredFrame = chalk.cyan(this.frames[i])\r\n      console.log(coloredFrame)\r\n      \r\n      // Add title\r\n      if (i === 1) {\r\n        console.log(chalk.bold.cyan('    === Tazz CLI Tool ==='))\r\n        console.log(chalk.gray('   AI-Powered Task Orchestrator'))\r\n      }\r\n      \r\n      // Wait between frames\r\n      await this.sleep(600)\r\n    }\r\n\r\n    // Final clear and setup for next content\r\n    await this.sleep(500)\r\n    process.stdout.write('\\x1b[2J\\x1b[0f')\r\n  }\r\n\r\n  private sleep(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n  }\r\n\r\n  /**\r\n   * Show a simple spinning tazz animation for shorter animations\r\n   */\r\n  async showSpinner(message: string = 'Processing'): Promise<() => void> {\r\n    const spinnerFrames = ['\uD83D\uDD25', '\u26A1', '\uD83D\uDCAB', '\u2B50']\r\n    let frameIndex = 0\r\n    let isSpinning = true\r\n\r\n    const spinner = setInterval(() => {\r\n      if (!isSpinning) return\r\n      \r\n      process.stdout.write('\\r')\r\n      process.stdout.write(`${spinnerFrames[frameIndex]} ${chalk.cyan(message)}...`)\r\n      \r\n      frameIndex = (frameIndex + 1) % spinnerFrames.length\r\n    }, 150)\r\n\r\n    // Return stop function\r\n    return () => {\r\n      isSpinning = false\r\n      clearInterval(spinner)\r\n      process.stdout.write('\\r' + ' '.repeat(50) + '\\r') // Clear line\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show a brief tazz burst for quick actions\r\n   */\r\n  async showBurst(): Promise<void> {\r\n    const burstFrames = [\r\n      '\uD83D\uDD25',\r\n      '\u26A1',\r\n      '\uD83D\uDD25\u26A1',\r\n      '\u26A1\uD83D\uDD25\uD83D\uDD25',\r\n      '\uD83D\uDD25\u26A1\u26A1\u26A1',\r\n      '\u26A1\u26A1\u26A1',\r\n      '\u26A1\u26A1',\r\n      '\u26A1'\r\n    ]\r\n\r\n    for (const frame of burstFrames) {\r\n      process.stdout.write('\\r' + chalk.cyan(frame))\r\n      await this.sleep(80)\r\n    }\r\n    \r\n    process.stdout.write('\\r' + ' '.repeat(20) + '\\r')\r\n  }\r\n}", "import { exec } from 'child_process'\r\nimport { promisify } from 'util'\r\nimport chalk from 'chalk'\r\nimport ora from 'ora'\r\nimport { getLogger } from './logger'\r\n\r\nconst execAsync = promisify(exec)\r\nconst logger = getLogger()\r\n\r\nexport interface DependencyInstaller {\r\n  checkCommand: string\r\n  installCommand: string\r\n  name: string\r\n}\r\n\r\nexport class DependencyManager {\r\n  private static installers: Record<string, DependencyInstaller[]> = {\r\n    linux: [\r\n      {\r\n        checkCommand: 'which apt-get',\r\n        installCommand: 'sudo apt-get update && sudo apt-get install -y tmux git',\r\n        name: 'apt (Ubuntu/Debian)'\r\n      },\r\n      {\r\n        checkCommand: 'which yum',\r\n        installCommand: 'sudo yum install -y tmux git',\r\n        name: 'yum (RHEL/CentOS)'\r\n      },\r\n      {\r\n        checkCommand: 'which dnf',\r\n        installCommand: 'sudo dnf install -y tmux git',\r\n        name: 'dnf (Fedora)'\r\n      },\r\n      {\r\n        checkCommand: 'which pacman',\r\n        installCommand: 'sudo pacman -S --noconfirm tmux git || pacman -S --noconfirm tmux git',\r\n        name: 'pacman (Arch Linux)'\r\n      },\r\n      {\r\n        checkCommand: 'which zypper',\r\n        installCommand: 'sudo zypper install -y tmux git',\r\n        name: 'zypper (openSUSE)'\r\n      }\r\n    ],\r\n    darwin: [\r\n      {\r\n        checkCommand: 'which brew',\r\n        installCommand: 'brew install tmux git',\r\n        name: 'Homebrew'\r\n      },\r\n      {\r\n        checkCommand: 'which port',\r\n        installCommand: 'sudo port install tmux git',\r\n        name: 'MacPorts'\r\n      }\r\n    ],\r\n    win32: [\r\n      {\r\n        checkCommand: 'where choco',\r\n        installCommand: 'choco install tmux git -y',\r\n        name: 'Chocolatey'\r\n      },\r\n      {\r\n        checkCommand: 'where winget',\r\n        installCommand: 'winget install tmux git',\r\n        name: 'WinGet'\r\n      }\r\n    ]\r\n  }\r\n\r\n  static async checkDependency(command: string): Promise<boolean> {\r\n    try {\r\n      // Try different version commands\r\n      try {\r\n        await execAsync(`${command} --version`)\r\n        return true\r\n      } catch {\r\n        // Some commands use -V instead\r\n        try {\r\n          await execAsync(`${command} -V`)\r\n          return true\r\n        } catch {\r\n          // Check if command exists\r\n          await execAsync(`which ${command}`)\r\n          return true\r\n        }\r\n      }\r\n    } catch {\r\n      return false\r\n    }\r\n  }\r\n\r\n  static async installTmux(): Promise<boolean> {\r\n    const platform = process.platform\r\n    const installers = this.installers[platform] || []\r\n\r\n    console.log('')\r\n    console.log(chalk.yellow('\uD83D\uDD27 Installing tmux automatically...'))\r\n    \r\n    for (const installer of installers) {\r\n      try {\r\n        // Check if package manager exists\r\n        await execAsync(installer.checkCommand)\r\n        \r\n        const spinner = ora(`Installing tmux using ${installer.name}`).start()\r\n        \r\n        try {\r\n          // Create tmux-only install command\r\n          let tmuxCommand = installer.installCommand.replace('tmux git', 'tmux')\r\n          \r\n          // For Arch Linux, try both sudo and non-sudo\r\n          if (installer.name.includes('pacman')) {\r\n            try {\r\n              await execAsync('sudo pacman -S --noconfirm tmux')\r\n            } catch {\r\n              // Try without sudo in case user has permissions\r\n              await execAsync('pacman -S --noconfirm tmux')\r\n            }\r\n          } else {\r\n            await execAsync(tmuxCommand)\r\n          }\r\n          \r\n          spinner.succeed(`tmux installed successfully using ${installer.name}`)\r\n          \r\n          // Verify installation with a small delay to let system update\r\n          await new Promise(resolve => setTimeout(resolve, 1000))\r\n          \r\n          if (await this.checkDependency('tmux')) {\r\n            console.log(chalk.green('\u2705 tmux is now available'))\r\n            return true\r\n          } else {\r\n            spinner.warn('Installation completed but tmux still not detected')\r\n            console.log(chalk.gray('   You may need to restart your shell or source your profile'))\r\n          }\r\n          \r\n        } catch (installError) {\r\n          spinner.fail(`Failed to install using ${installer.name}`)\r\n          logger.debug('Installation failed', installError as Error)\r\n          console.log(chalk.gray(`   Error: ${(installError as Error).message}`))\r\n          continue\r\n        }\r\n        \r\n      } catch {\r\n        // Package manager not available, try next one\r\n        continue\r\n      }\r\n    }\r\n\r\n    // If auto-installation failed, provide manual instructions\r\n    console.log('')\r\n    console.log(chalk.yellow('\u26A0\uFE0F  Automatic installation failed'))\r\n    console.log(chalk.bold('Manual installation options:'))\r\n    \r\n    switch (platform) {\r\n      case 'linux':\r\n        console.log(chalk.gray('  Ubuntu/Debian:'), chalk.cyan('sudo apt-get install tmux'))\r\n        console.log(chalk.gray('  RHEL/CentOS:'), chalk.cyan('sudo yum install tmux'))\r\n        console.log(chalk.gray('  Fedora:'), chalk.cyan('sudo dnf install tmux'))\r\n        console.log(chalk.gray('  Arch Linux:'), chalk.cyan('sudo pacman -S tmux'))\r\n        break\r\n      case 'darwin':\r\n        console.log(chalk.gray('  Homebrew:'), chalk.cyan('brew install tmux'))\r\n        console.log(chalk.gray('  MacPorts:'), chalk.cyan('sudo port install tmux'))\r\n        break\r\n      case 'win32':\r\n        console.log(chalk.gray('  Chocolatey:'), chalk.cyan('choco install tmux'))\r\n        console.log(chalk.gray('  WinGet:'), chalk.cyan('winget install tmux'))\r\n        break\r\n    }\r\n    \r\n    return false\r\n  }\r\n\r\n  static async ensureDependencies(): Promise<boolean> {\r\n    const dependencies = [\r\n      { command: 'git', name: 'Git' },\r\n      { command: 'tmux', name: 'tmux' }\r\n    ]\r\n\r\n    const missing = []\r\n    \r\n    for (const dep of dependencies) {\r\n      if (!await this.checkDependency(dep.command)) {\r\n        missing.push(dep)\r\n      }\r\n    }\r\n\r\n    if (missing.length === 0) {\r\n      return true\r\n    }\r\n\r\n    console.log('')\r\n    console.log(chalk.yellow(`\uD83D\uDD0D Missing dependencies: ${missing.map(d => d.name).join(', ')}`))\r\n    \r\n    // Try to install tmux if missing\r\n    if (missing.some(d => d.command === 'tmux')) {\r\n      const installed = await this.installTmux()\r\n      if (!installed) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    // Check git separately (usually pre-installed)\r\n    if (missing.some(d => d.command === 'git') && !await this.checkDependency('git')) {\r\n      console.log('')\r\n      console.log(chalk.red('\u274C Git is required but not installed'))\r\n      console.log(chalk.gray('Please install Git first: https://git-scm.com/downloads'))\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}", "import { Command } from 'commander'\r\nimport chalk from 'chalk'\r\nimport { exec } from 'child_process'\r\nimport { promisify } from 'util'\r\nimport { getLogger } from '../../utils/logger'\r\n\r\nconst execAsync = promisify(exec)\r\n\r\nexport class ListCommand {\r\n  private logger = getLogger()\r\n\r\n  build(): Command {\r\n    return new Command('list')\r\n      .alias('ls')\r\n      .description('\uD83D\uDCCB List all active Tazz processes')\r\n      .option('-v, --verbose', 'Show detailed session information')\r\n      .action(async (options) => {\r\n        await this.execute(options)\r\n      })\r\n  }\r\n\r\n  async execute(options: {\r\n    verbose?: boolean\r\n  } = {}): Promise<void> {\r\n    console.log('')\r\n    console.log(chalk.bold.cyan('\uD83D\uDCCB Active Tazz Processes'))\r\n    console.log('')\r\n\r\n    try {\r\n      // Get tmux sessions\r\n      const sessions = await this.getTmuxSessions()\r\n      \r\n      if (sessions.length === 0) {\r\n        console.log(chalk.yellow('\uD83D\uDCED No active processes found'))\r\n        console.log('')\r\n        console.log(chalk.gray('Start new processes with:'), chalk.cyan('tazz run <instance-name>'))\r\n        console.log('')\r\n        return\r\n      }\r\n\r\n      // Group sessions by instance\r\n      const grouped = this.groupSessionsByInstance(sessions)\r\n      \r\n      Object.entries(grouped).forEach(([project, projectSessions]) => {\r\n        console.log(chalk.bold.green(`\uD83D\uDE80 Instance: ${project}`))\r\n        console.log('')\r\n        \r\n        if (projectSessions.tasks.length > 0) {\r\n          console.log(chalk.bold('  \uD83D\uDCCB Task Processes:'))\r\n          projectSessions.tasks.forEach((session, i) => {\r\n            console.log(`    ${i + 1}. ${chalk.cyan(session.fullProcessId || session.taskName)} ${chalk.gray(`(${session.taskName})`)}`)\r\n            if (options.verbose && session.created) {\r\n              console.log(`       ${chalk.gray('Created:')} ${session.created}`)\r\n            }\r\n            console.log(`       ${chalk.gray('Join with:')} ${chalk.cyan(`tazz join ${session.fullProcessId || session.taskName}`)}`)\r\n          })\r\n          console.log('')\r\n        }\r\n        \r\n        if (projectSessions.main.length > 0) {\r\n          console.log(chalk.bold('  \uD83D\uDD27 Main Sessions:'))\r\n          projectSessions.main.forEach((session, i) => {\r\n            console.log(`    ${i + 1}. ${chalk.cyan(session.fullProcessId || session.project)}`)\r\n            if (options.verbose && session.created) {\r\n              console.log(`       ${chalk.gray('Created:')} ${session.created}`)\r\n            }\r\n            console.log(`       ${chalk.gray('Join with:')} ${chalk.cyan(`tazz join ${session.fullProcessId || session.project}`)}`)\r\n          })\r\n          console.log('')\r\n        }\r\n      })\r\n\r\n      // Show quick actions\r\n      this.showQuickActions(sessions)\r\n\r\n    } catch (error) {\r\n      this.logger.error('Failed to list sessions', error as Error)\r\n      console.log(chalk.red('\u274C Failed to list sessions'))\r\n      console.log(chalk.red(`   ${(error as Error).message}`))\r\n      process.exit(1)\r\n    }\r\n  }\r\n\r\n  private async getTmuxSessions(): Promise<Array<{sessionId: string, created: string, project?: string, taskName?: string}>> {\r\n    try {\r\n      // Get all tmux sessions that start with 'tazz_'\r\n      const { stdout } = await execAsync('tmux list-sessions -F \"#{session_name}:#{session_created}\" 2>/dev/null || true')\r\n      \r\n      if (!stdout.trim()) {\r\n        return []\r\n      }\r\n      \r\n      const sessions = stdout.trim().split('\\n')\r\n        .filter(line => line.includes('tazz_'))\r\n        .map(line => {\r\n          const [sessionId, created] = line.split(':')\r\n          const createdDate = new Date(parseInt(created) * 1000).toLocaleString()\r\n          \r\n          // Parse session ID to extract instance and task info\r\n          // New format: tazz_instance_taskname\r\n          const match = sessionId.match(/^tazz_(.+)$/)\r\n          if (match) {\r\n            const fullId = match[1]\r\n            // Try to split by last underscore to separate instance from task\r\n            const lastUnderscoreIndex = fullId.lastIndexOf('_')\r\n            if (lastUnderscoreIndex > 0) {\r\n              const instance = fullId.substring(0, lastUnderscoreIndex)\r\n              const taskName = fullId.substring(lastUnderscoreIndex + 1)\r\n              return {\r\n                sessionId,\r\n                created: createdDate,\r\n                project: instance,\r\n                taskName: taskName,\r\n                fullProcessId: fullId\r\n              }\r\n            } else {\r\n              // Single session without task\r\n              return {\r\n                sessionId,\r\n                created: createdDate,\r\n                project: fullId,\r\n                fullProcessId: fullId\r\n              }\r\n            }\r\n          }\r\n          \r\n          return {\r\n            sessionId,\r\n            created: createdDate\r\n          }\r\n        })\r\n      \r\n      return sessions\r\n    } catch (error) {\r\n      // If tmux command fails, return empty array\r\n      return []\r\n    }\r\n  }\r\n\r\n  private groupSessionsByInstance(sessions: Array<{sessionId: string, created: string, project?: string, taskName?: string}>): Record<string, {tasks: any[], main: any[]}> {\r\n    const grouped: Record<string, {tasks: any[], main: any[]}> = {}\r\n    \r\n    sessions.forEach(session => {\r\n      const project = session.project || 'unknown'\r\n      \r\n      if (!grouped[project]) {\r\n        grouped[project] = { tasks: [], main: [] }\r\n      }\r\n      \r\n      if (session.taskName) {\r\n        grouped[project].tasks.push(session)\r\n      } else {\r\n        grouped[project].main.push(session)\r\n      }\r\n    })\r\n    \r\n    return grouped\r\n  }\r\n\r\n  private showQuickActions(sessions: any[]): void {\r\n    console.log(chalk.bold('\uD83D\uDE80 Quick Actions:'))\r\n    console.log('')\r\n    \r\n    if (sessions.length > 0) {\r\n      // Find first task process to show as example\r\n      const taskSession = sessions.find(s => s.taskName)\r\n      if (taskSession) {\r\n        console.log(chalk.gray('  Join task process:'), chalk.cyan(`tazz join ${taskSession.fullProcessId}`))\r\n      }\r\n      \r\n      // Find first main session\r\n      const mainSession = sessions.find(s => !s.taskName)\r\n      if (mainSession && mainSession.project) {\r\n        console.log(chalk.gray('  Join main session:'), chalk.cyan(`tazz join ${mainSession.fullProcessId || mainSession.project}`))\r\n      }\r\n      \r\n      console.log(chalk.gray('  Delete a process:'), chalk.cyan(`tazz delete <process-id>`))\r\n    }\r\n    \r\n    console.log(chalk.gray('  Create new processes:'), chalk.cyan('tazz run <instance-name>'))\r\n    console.log('')\r\n  }\r\n}", "import { Command } from 'commander'\r\nimport chalk from 'chalk'\r\nimport { exec } from 'child_process'\r\nimport { promisify } from 'util'\r\nimport { getLogger } from '../../utils/logger'\r\n\r\nconst execAsync = promisify(exec)\r\n\r\nexport class JoinCommand {\r\n  private logger = getLogger()\r\n\r\n  build(): Command {\r\n    return new Command('join')\r\n      .alias('attach')\r\n      .description('\uD83D\uDD17 Join an existing Tazz process')\r\n      .argument('<process-id>', 'Process ID to join (e.g., instance_task-1)')\r\n      .action(async (processId: string) => {\r\n        await this.execute(processId)\r\n      })\r\n  }\r\n\r\n  async execute(processId: string): Promise<void> {\r\n    console.log('')\r\n    \r\n    try {\r\n      // Build tmux session name - process ID is already the full identifier\r\n      const tmuxSessionName = `tazz_${processId}`\r\n      \r\n      console.log(chalk.cyan(`\uD83D\uDD17 Joining Tazz process: ${processId}`))\r\n\r\n      // Check if session exists\r\n      try {\r\n        await execAsync(`tmux has-session -t ${tmuxSessionName}`)\r\n      } catch (error) {\r\n        console.log(chalk.red(`\u274C Tazz process not found: ${processId}`))\r\n        \r\n        // List available sessions\r\n        await this.listAvailableSessions()\r\n        process.exit(1)\r\n      }\r\n\r\n      // Join tmux session\r\n      await this.joinTmuxSession(tmuxSessionName)\r\n\r\n    } catch (error) {\r\n      console.log(chalk.red(`\u274C Failed to join session: ${(error as Error).message}`))\r\n      this.logger.error('Join failed', error as Error)\r\n      process.exit(1)\r\n    }\r\n  }\r\n\r\n  private async joinTmuxSession(sessionName: string): Promise<void> {\r\n    try {\r\n      // Check if we're already in a tmux session\r\n      if (process.env.TMUX) {\r\n        console.log(chalk.yellow('\u26A0\uFE0F  Already inside a tmux session'))\r\n        console.log(chalk.gray('   Switch to session:'), chalk.cyan(`tmux switch-client -t ${sessionName}`))\r\n        return\r\n      }\r\n      \r\n      // Import spawn to replace current process\r\n      const { spawn } = require('child_process')\r\n      \r\n      console.log(chalk.green(`\u2705 Joining Tazz process: ${sessionName}`))\r\n      \r\n      // Spawn tmux attach and replace current process\r\n      const tmux = spawn('tmux', ['attach-session', '-t', sessionName], {\r\n        stdio: 'inherit',\r\n        detached: false\r\n      })\r\n      \r\n      // Exit current process when tmux session ends\r\n      tmux.on('exit', (code) => {\r\n        process.exit(code || 0)\r\n      })\r\n      \r\n    } catch (error) {\r\n      console.log(chalk.yellow('\u26A0\uFE0F  Could not join tmux session'))\r\n      console.log(chalk.gray('   Try manually:'), chalk.cyan(`tmux attach-session -t ${sessionName}`))\r\n    }\r\n  }\r\n\r\n  private async listAvailableSessions(): Promise<void> {\r\n    try {\r\n      const { stdout } = await execAsync('tmux list-sessions | grep tazz')\r\n      console.log('')\r\n      console.log(chalk.yellow('Available Tazz processes:'))\r\n      console.log(chalk.gray(stdout))\r\n    } catch {\r\n      console.log(chalk.gray('No active Tazz processes found'))\r\n    }\r\n  }\r\n}", "import { Command } from 'commander'\r\nimport chalk from 'chalk'\r\nimport { SessionStore } from '../../core/storage/SessionStore'\r\nimport { SessionStatus } from '../../core/types'\r\nimport { getLogger } from '../../utils/logger'\r\n\r\nexport class StopCommand {\r\n  private logger = getLogger()\r\n\r\n  build(): Command {\r\n    return new Command('stop')\r\n      .description('\u23F8\uFE0F  Stop a Tazz session (keeps worktree)')\r\n      .argument('<session-id>', 'Session identifier to stop')\r\n      .action(async (sessionId: string) => {\r\n        await this.execute(sessionId)\r\n      })\r\n  }\r\n\r\n  async execute(sessionId: string): Promise<void> {\r\n    console.log('')\r\n    console.log(chalk.yellow(`\u23F8\uFE0F  Stopping session: ${sessionId}`))\r\n\r\n    try {\r\n      const sessionStore = new SessionStore()\r\n      await sessionStore.updateSessionStatus(sessionId, SessionStatus.STOPPED)\r\n      \r\n      console.log(chalk.green(`\u2705 Session ${sessionId} stopped`))\r\n      console.log(chalk.gray(`   Use 'tazz join ${sessionId}' to resume`))\r\n\r\n    } catch (error) {\r\n      console.log(chalk.red(`\u274C Failed to stop session: ${(error as Error).message}`))\r\n      process.exit(1)\r\n    }\r\n  }\r\n}", "import { readFile, writeFile, pathExists, ensureFile } from 'fs-extra'\r\nimport { join } from 'path'\r\nimport { TazzSession, SessionError } from '../types'\r\n\r\nexport interface SessionData {\r\n  sessions: TazzSession[]\r\n  lastUpdated: string\r\n}\r\n\r\nexport class SessionStore {\r\n  private sessionsPath: string\r\n\r\n  constructor(projectPath: string = process.cwd()) {\r\n    this.sessionsPath = join(projectPath, '.tazz', 'sessions.json')\r\n  }\r\n\r\n  async getAllSessions(): Promise<TazzSession[]> {\r\n    try {\r\n      if (!await pathExists(this.sessionsPath)) {\r\n        return []\r\n      }\r\n\r\n      const data = await readFile(this.sessionsPath, 'utf-8')\r\n      const sessionData: SessionData = JSON.parse(data)\r\n      \r\n      return sessionData.sessions || []\r\n    } catch (error) {\r\n      throw new SessionError('Failed to read sessions file', {\r\n        path: this.sessionsPath\r\n      }, error)\r\n    }\r\n  }\r\n\r\n  async getSession(sessionId: string): Promise<TazzSession | null> {\r\n    const sessions = await this.getAllSessions()\r\n    return sessions.find(s => s.id === sessionId) || null\r\n  }\r\n\r\n  async saveSession(session: TazzSession): Promise<void> {\r\n    try {\r\n      const sessions = await this.getAllSessions()\r\n      const existingIndex = sessions.findIndex(s => s.id === session.id)\r\n\r\n      if (existingIndex >= 0) {\r\n        sessions[existingIndex] = session\r\n      } else {\r\n        sessions.push(session)\r\n      }\r\n\r\n      const sessionData: SessionData = {\r\n        sessions,\r\n        lastUpdated: new Date().toISOString()\r\n      }\r\n\r\n      await ensureFile(this.sessionsPath)\r\n      await writeFile(this.sessionsPath, JSON.stringify(sessionData, null, 2))\r\n    } catch (error) {\r\n      throw new SessionError('Failed to save session', {\r\n        sessionId: session.id,\r\n        path: this.sessionsPath\r\n      }, error)\r\n    }\r\n  }\r\n\r\n  async removeSession(sessionId: string): Promise<void> {\r\n    try {\r\n      const sessions = await this.getAllSessions()\r\n      const filteredSessions = sessions.filter(s => s.id !== sessionId)\r\n\r\n      const sessionData: SessionData = {\r\n        sessions: filteredSessions,\r\n        lastUpdated: new Date().toISOString()\r\n      }\r\n\r\n      await writeFile(this.sessionsPath, JSON.stringify(sessionData, null, 2))\r\n    } catch (error) {\r\n      throw new SessionError('Failed to remove session', {\r\n        sessionId,\r\n        path: this.sessionsPath\r\n      }, error)\r\n    }\r\n  }\r\n\r\n  async updateSessionStatus(sessionId: string, status: any): Promise<void> {\r\n    const session = await this.getSession(sessionId)\r\n    if (!session) {\r\n      throw new SessionError(`Session ${sessionId} not found`)\r\n    }\r\n\r\n    session.status = status\r\n    session.lastActive = new Date()\r\n    \r\n    await this.saveSession(session)\r\n  }\r\n}", "import { Command } from 'commander'\r\nimport chalk from 'chalk'\r\nimport inquirer from 'inquirer'\r\nimport { exec } from 'child_process'\r\nimport { promisify } from 'util'\r\nimport { getLogger } from '../../utils/logger'\r\n\r\nconst execAsync = promisify(exec)\r\n\r\nexport class DeleteCommand {\r\n  private logger = getLogger()\r\n\r\n  build(): Command {\r\n    return new Command('delete')\r\n      .alias('rm')\r\n      .alias('destroy')\r\n      .description('\uD83D\uDDD1\uFE0F  Delete a Tazz process')\r\n      .argument('<process-id>', 'Process ID to delete (e.g., instance_task-1)')\r\n      .option('-f, --force', 'Skip confirmation prompt')\r\n      .action(async (processId: string, options) => {\r\n        await this.execute(processId, options)\r\n      })\r\n  }\r\n\r\n  async execute(processId: string, options: { force?: boolean } = {}): Promise<void> {\r\n    console.log('')\r\n    \r\n    try {\r\n      // Build tmux session name\r\n      const tmuxSessionName = `tazz_${processId}`\r\n      \r\n      // Check if session exists\r\n      try {\r\n        await execAsync(`tmux has-session -t ${tmuxSessionName}`)\r\n      } catch (error) {\r\n        console.log(chalk.red(`\u274C Tazz process not found: ${processId}`))\r\n        \r\n        // List available sessions\r\n        await this.listAvailableProcesses()\r\n        process.exit(1)\r\n      }\r\n\r\n      // Confirmation prompt\r\n      if (!options.force) {\r\n        const { confirmed } = await inquirer.prompt([{\r\n          type: 'confirm',\r\n          name: 'confirmed',\r\n          message: `Are you sure you want to delete Tazz process ${processId}? This will kill the tmux session.`,\r\n          default: false\r\n        }])\r\n\r\n        if (!confirmed) {\r\n          console.log(chalk.yellow('\u274C Deletion cancelled'))\r\n          return\r\n        }\r\n      }\r\n\r\n      console.log(chalk.yellow(`\uD83D\uDDD1\uFE0F  Deleting Tazz process: ${processId}`))\r\n\r\n      // Kill tmux session\r\n      await execAsync(`tmux kill-session -t ${tmuxSessionName}`)\r\n      \r\n      console.log(chalk.green(`\u2705 Tazz process ${processId} deleted`))\r\n\r\n    } catch (error) {\r\n      console.log(chalk.red(`\u274C Failed to delete process: ${(error as Error).message}`))\r\n      this.logger.error('Delete failed', error as Error)\r\n      process.exit(1)\r\n    }\r\n  }\r\n\r\n  private async listAvailableProcesses(): Promise<void> {\r\n    try {\r\n      const { stdout } = await execAsync('tmux list-sessions | grep tazz')\r\n      console.log('')\r\n      console.log(chalk.yellow('Available Tazz processes:'))\r\n      console.log(chalk.gray(stdout))\r\n    } catch {\r\n      console.log(chalk.gray('No active Tazz processes found'))\r\n    }\r\n  }\r\n}", "import { Command } from 'commander'\r\nimport chalk from 'chalk'\r\nimport ora from 'ora'\r\nimport { exec } from 'child_process'\r\nimport { promisify } from 'util'\r\nimport { pathExists } from 'fs-extra'\r\nimport { getLogger } from '../../utils/logger'\r\nimport { DependencyManager } from '../../utils/dependencies'\r\n\r\nconst execAsync = promisify(exec)\r\n\r\nexport class HealthCommand {\r\n  private logger = getLogger()\r\n\r\n  build(): Command {\r\n    return new Command('health')\r\n      .description('\uD83C\uDFE5 Check Tazz CLI health and system dependencies')\r\n      .option('--fix', 'Automatically fix issues where possible')\r\n      .option('--verbose', 'Show detailed diagnostic information')\r\n      .action(async (options) => {\r\n        await this.execute(options)\r\n      })\r\n  }\r\n\r\n  async execute(options: {\r\n    fix?: boolean\r\n    verbose?: boolean\r\n  } = {}): Promise<void> {\r\n    console.log('')\r\n    console.log(chalk.bold.cyan('\uD83C\uDFE5 Tazz CLI Health Check'))\r\n    console.log(chalk.gray('Checking system dependencies and configuration...'))\r\n    console.log('')\r\n\r\n    const healthChecks = [\r\n      { name: 'Node.js', check: () => this.checkNode() },\r\n      { name: 'npm/yarn', check: () => this.checkPackageManager() },\r\n      { name: 'Git', check: () => this.checkGit() },\r\n      { name: 'tmux', check: () => this.checkTmux(options.fix) },\r\n      { name: 'Claude Code', check: () => this.checkClaudeCode() },\r\n      { name: 'Tazz Configuration', check: () => this.checkTazzConfig() },\r\n      { name: 'System Resources', check: () => this.checkSystemResources() },\r\n      { name: 'Network Connectivity', check: () => this.checkNetwork() }\r\n    ]\r\n\r\n    const results: Array<{ name: string; status: 'pass' | 'fail' | 'warn'; message: string; details?: string }> = []\r\n\r\n    for (const healthCheck of healthChecks) {\r\n      const spinner = ora(`Checking ${healthCheck.name}`).start()\r\n      \r\n      try {\r\n        const result = await healthCheck.check()\r\n        results.push({ name: healthCheck.name, ...result })\r\n        \r\n        if (result.status === 'pass') {\r\n          spinner.succeed(chalk.green(`${healthCheck.name}: ${result.message}`))\r\n        } else if (result.status === 'warn') {\r\n          spinner.warn(chalk.yellow(`${healthCheck.name}: ${result.message}`))\r\n        } else {\r\n          spinner.fail(chalk.red(`${healthCheck.name}: ${result.message}`))\r\n        }\r\n        \r\n        if (options.verbose && result.details) {\r\n          console.log(chalk.gray(`   ${result.details}`))\r\n        }\r\n        \r\n      } catch (error) {\r\n        results.push({\r\n          name: healthCheck.name,\r\n          status: 'fail',\r\n          message: `Check failed: ${(error as Error).message}`\r\n        })\r\n        spinner.fail(chalk.red(`${healthCheck.name}: Check failed`))\r\n      }\r\n    }\r\n\r\n    // Summary\r\n    console.log('')\r\n    this.printHealthSummary(results)\r\n    \r\n    // Recommendations\r\n    const failedChecks = results.filter(r => r.status === 'fail')\r\n    const warningChecks = results.filter(r => r.status === 'warn')\r\n    \r\n    if (failedChecks.length > 0 || warningChecks.length > 0) {\r\n      console.log('')\r\n      console.log(chalk.bold('\uD83D\uDD27 Recommendations:'))\r\n      \r\n      for (const check of [...failedChecks, ...warningChecks]) {\r\n        console.log('')\r\n        console.log(chalk.bold(`${check.name}:`))\r\n        console.log(chalk.gray(`  Issue: ${check.message}`))\r\n        \r\n        const recommendation = this.getRecommendation(check.name, check.status)\r\n        if (recommendation) {\r\n          console.log(chalk.cyan(`  Fix: ${recommendation}`))\r\n        }\r\n      }\r\n    }\r\n\r\n    // Auto-fix option\r\n    if (options.fix && failedChecks.length > 0) {\r\n      console.log('')\r\n      console.log(chalk.yellow('\uD83D\uDD28 Attempting to fix issues automatically...'))\r\n      await this.autoFix(failedChecks)\r\n    }\r\n\r\n    console.log('')\r\n  }\r\n\r\n  private async checkNode(): Promise<{ status: 'pass' | 'fail' | 'warn'; message: string; details?: string }> {\r\n    try {\r\n      const { stdout } = await execAsync('node --version')\r\n      const version = stdout.trim()\r\n      const majorVersion = parseInt(version.replace('v', '').split('.')[0])\r\n      \r\n      if (majorVersion >= 18) {\r\n        return {\r\n          status: 'pass',\r\n          message: `${version} (supported)`,\r\n          details: `Node.js ${version} is compatible with Tazz CLI`\r\n        }\r\n      } else if (majorVersion >= 16) {\r\n        return {\r\n          status: 'warn',\r\n          message: `${version} (outdated but supported)`,\r\n          details: 'Consider upgrading to Node.js 18+ for best performance'\r\n        }\r\n      } else {\r\n        return {\r\n          status: 'fail',\r\n          message: `${version} (unsupported)`,\r\n          details: 'Tazz CLI requires Node.js 16+ (18+ recommended)'\r\n        }\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        status: 'fail',\r\n        message: 'Node.js not found',\r\n        details: 'Install Node.js from https://nodejs.org'\r\n      }\r\n    }\r\n  }\r\n\r\n  private async checkPackageManager(): Promise<{ status: 'pass' | 'fail' | 'warn'; message: string; details?: string }> {\r\n    try {\r\n      const { stdout: npmVersion } = await execAsync('npm --version')\r\n      \r\n      try {\r\n        const { stdout: yarnVersion } = await execAsync('yarn --version')\r\n        return {\r\n          status: 'pass',\r\n          message: `npm ${npmVersion.trim()}, yarn ${yarnVersion.trim()}`,\r\n          details: 'Both npm and yarn are available'\r\n        }\r\n      } catch {\r\n        return {\r\n          status: 'pass',\r\n          message: `npm ${npmVersion.trim()}`,\r\n          details: 'npm is available (yarn not installed)'\r\n        }\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        status: 'fail',\r\n        message: 'No package manager found',\r\n        details: 'Install npm (comes with Node.js) or yarn'\r\n      }\r\n    }\r\n  }\r\n\r\n  private async checkGit(): Promise<{ status: 'pass' | 'fail' | 'warn'; message: string; details?: string }> {\r\n    try {\r\n      const { stdout } = await execAsync('git --version')\r\n      const version = stdout.trim().replace('git version ', '')\r\n      \r\n      // Check git configuration\r\n      try {\r\n        const { stdout: userName } = await execAsync('git config user.name')\r\n        const { stdout: userEmail } = await execAsync('git config user.email')\r\n        \r\n        if (userName.trim() && userEmail.trim()) {\r\n          return {\r\n            status: 'pass',\r\n            message: `${version} (configured)`,\r\n            details: `User: ${userName.trim()} <${userEmail.trim()}>`\r\n          }\r\n        } else {\r\n          return {\r\n            status: 'warn',\r\n            message: `${version} (not configured)`,\r\n            details: 'Git user name and email not configured'\r\n          }\r\n        }\r\n      } catch {\r\n        return {\r\n          status: 'warn',\r\n          message: `${version} (not configured)`,\r\n          details: 'Git user name and email not configured'\r\n        }\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        status: 'fail',\r\n        message: 'Git not found',\r\n        details: 'Install Git from https://git-scm.com'\r\n      }\r\n    }\r\n  }\r\n\r\n  private async checkTmux(autoFix?: boolean): Promise<{ status: 'pass' | 'fail' | 'warn'; message: string; details?: string }> {\r\n    try {\r\n      const { stdout } = await execAsync('tmux -V')\r\n      const version = stdout.trim()\r\n      \r\n      return {\r\n        status: 'pass',\r\n        message: `${version} (available)`,\r\n        details: 'tmux is installed and available for session management'\r\n      }\r\n    } catch (error) {\r\n      if (autoFix) {\r\n        try {\r\n          const installed = await DependencyManager.installTmux()\r\n          if (installed) {\r\n            return {\r\n              status: 'pass',\r\n              message: 'Installed automatically',\r\n              details: 'tmux was successfully installed'\r\n            }\r\n          }\r\n        } catch (installError) {\r\n          // Fall through to manual installation message\r\n        }\r\n      }\r\n      \r\n      return {\r\n        status: 'fail',\r\n        message: 'tmux not found',\r\n        details: 'tmux is required for session management'\r\n      }\r\n    }\r\n  }\r\n\r\n  private async checkClaudeCode(): Promise<{ status: 'pass' | 'fail' | 'warn'; message: string; details?: string }> {\r\n    try {\r\n      // Check if Claude Code CLI is available\r\n      const { stdout } = await execAsync('claude --version')\r\n      const version = stdout.trim()\r\n      \r\n      return {\r\n        status: 'pass',\r\n        message: `${version} (available)`,\r\n        details: 'Claude Code CLI is installed and available'\r\n      }\r\n    } catch (error) {\r\n      // Check if running in Claude Code environment\r\n      if (process.env.CLAUDE_CODE) {\r\n        return {\r\n          status: 'pass',\r\n          message: 'Running in Claude Code',\r\n          details: 'Tazz is running within Claude Code environment'\r\n        }\r\n      }\r\n      \r\n      return {\r\n        status: 'warn',\r\n        message: 'Claude Code not detected',\r\n        details: 'Some features may not be available without Claude Code integration'\r\n      }\r\n    }\r\n  }\r\n\r\n  private async checkTazzConfig(): Promise<{ status: 'pass' | 'fail' | 'warn'; message: string; details?: string }> {\r\n    const tazzTmpDir = '/tmp/tazz-tmp'\r\n    const configExists = await pathExists(tazzTmpDir)\r\n    \r\n    if (configExists) {\r\n      return {\r\n        status: 'pass',\r\n        message: 'Configuration directory exists',\r\n        details: `Tazz data directory: ${tazzTmpDir}`\r\n      }\r\n    } else {\r\n      return {\r\n        status: 'warn',\r\n        message: 'Configuration directory missing',\r\n        details: 'Will be created automatically when needed'\r\n      }\r\n    }\r\n  }\r\n\r\n  private async checkSystemResources(): Promise<{ status: 'pass' | 'fail' | 'warn'; message: string; details?: string }> {\r\n    try {\r\n      // Check available disk space\r\n      const { stdout } = await execAsync('df -h /tmp')\r\n      const lines = stdout.trim().split('\\n')\r\n      const tmpLine = lines[1]\r\n      const parts = tmpLine.split(/\\s+/)\r\n      const available = parts[3]\r\n      const usage = parts[4]\r\n      \r\n      const usagePercent = parseInt(usage.replace('%', ''))\r\n      \r\n      if (usagePercent < 80) {\r\n        return {\r\n          status: 'pass',\r\n          message: `Disk space: ${available} available`,\r\n          details: `/tmp usage: ${usage}`\r\n        }\r\n      } else if (usagePercent < 90) {\r\n        return {\r\n          status: 'warn',\r\n          message: `Disk space: ${available} available`,\r\n          details: `/tmp usage: ${usage} (consider cleaning up)`\r\n        }\r\n      } else {\r\n        return {\r\n          status: 'fail',\r\n          message: `Disk space: ${available} available`,\r\n          details: `/tmp usage: ${usage} (critically low space)`\r\n        }\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        status: 'warn',\r\n        message: 'Unable to check disk space',\r\n        details: 'System resource check failed'\r\n      }\r\n    }\r\n  }\r\n\r\n  private async checkNetwork(): Promise<{ status: 'pass' | 'fail' | 'warn'; message: string; details?: string }> {\r\n    try {\r\n      // Test basic connectivity\r\n      await execAsync('ping -c 1 -W 5 8.8.8.8')\r\n      \r\n      // Test HTTPS connectivity (for MCP servers, npm, etc.)\r\n      try {\r\n        await execAsync('curl -s --max-time 10 https://registry.npmjs.org')\r\n        return {\r\n          status: 'pass',\r\n          message: 'Internet connectivity available',\r\n          details: 'Can reach npm registry and external services'\r\n        }\r\n      } catch {\r\n        return {\r\n          status: 'warn',\r\n          message: 'Limited connectivity',\r\n          details: 'Basic internet works but HTTPS may be restricted'\r\n        }\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        status: 'warn',\r\n        message: 'No internet connectivity',\r\n        details: 'Some features may not work without internet access'\r\n      }\r\n    }\r\n  }\r\n\r\n  private printHealthSummary(results: Array<{ name: string; status: 'pass' | 'fail' | 'warn'; message: string }>): void {\r\n    const passed = results.filter(r => r.status === 'pass').length\r\n    const warnings = results.filter(r => r.status === 'warn').length\r\n    const failed = results.filter(r => r.status === 'fail').length\r\n    \r\n    console.log(chalk.bold('\uD83D\uDCCA Health Summary:'))\r\n    console.log(chalk.green(`   \u2705 Passed: ${passed}`))\r\n    if (warnings > 0) {\r\n      console.log(chalk.yellow(`   \u26A0\uFE0F  Warnings: ${warnings}`))\r\n    }\r\n    if (failed > 0) {\r\n      console.log(chalk.red(`   \u274C Failed: ${failed}`))\r\n    }\r\n    \r\n    if (failed === 0 && warnings === 0) {\r\n      console.log('')\r\n      console.log(chalk.green.bold('\uD83C\uDF89 All systems healthy! Tazz CLI is ready to use.'))\r\n    } else if (failed === 0) {\r\n      console.log('')\r\n      console.log(chalk.yellow.bold('\u26A0\uFE0F  Minor issues detected but Tazz CLI should work fine.'))\r\n    } else {\r\n      console.log('')\r\n      console.log(chalk.red.bold('\u274C Critical issues detected. Some features may not work.'))\r\n    }\r\n  }\r\n\r\n  private getRecommendation(checkName: string, status: 'fail' | 'warn'): string | null {\r\n    const recommendations: Record<string, Record<'fail' | 'warn', string>> = {\r\n      'Node.js': {\r\n        fail: 'Install Node.js 18+ from https://nodejs.org',\r\n        warn: 'Upgrade to Node.js 18+ for better performance and latest features'\r\n      },\r\n      'npm/yarn': {\r\n        fail: 'Install Node.js (includes npm) or yarn package manager',\r\n        warn: 'Consider installing yarn for better package management'\r\n      },\r\n      'Git': {\r\n        fail: 'Install Git from https://git-scm.com and configure with: git config --global user.name \"Your Name\" && git config --global user.email \"your@email.com\"',\r\n        warn: 'Configure Git with: git config --global user.name \"Your Name\" && git config --global user.email \"your@email.com\"'\r\n      },\r\n      'tmux': {\r\n        fail: 'Install tmux using your package manager or run: tazz health --fix',\r\n        warn: 'Update tmux to latest version'\r\n      },\r\n      'Claude Code': {\r\n        fail: 'Install Claude Code from https://claude.ai/code',\r\n        warn: 'Some MCP features may not be available'\r\n      },\r\n      'System Resources': {\r\n        fail: 'Free up disk space in /tmp directory',\r\n        warn: 'Consider cleaning up temporary files'\r\n      },\r\n      'Network Connectivity': {\r\n        fail: 'Check internet connection and firewall settings',\r\n        warn: 'Some online features may not work'\r\n      }\r\n    }\r\n    \r\n    return recommendations[checkName]?.[status] || null\r\n  }\r\n\r\n  private async autoFix(failedChecks: Array<{ name: string; status: 'fail'; message: string }>): Promise<void> {\r\n    for (const check of failedChecks) {\r\n      if (check.name === 'tmux') {\r\n        const spinner = ora('Installing tmux').start()\r\n        try {\r\n          const installed = await DependencyManager.installTmux()\r\n          if (installed) {\r\n            spinner.succeed('tmux installed successfully')\r\n            \r\n            // Verify installation worked\r\n            const stillMissing = await this.checkTmux(false)\r\n            if (stillMissing.status === 'pass') {\r\n              console.log(chalk.green('\u2705 tmux is now available and working'))\r\n            }\r\n          } else {\r\n            spinner.fail('Failed to install tmux automatically')\r\n            console.log(chalk.yellow('\uD83D\uDCA1 Try running: tazz health --fix'))\r\n          }\r\n        } catch (error) {\r\n          spinner.fail('tmux installation failed')\r\n          this.logger.error('Auto-fix failed for tmux', error as Error)\r\n        }\r\n      }\r\n      \r\n      if (check.name === 'Git' && check.message.includes('not configured')) {\r\n        console.log('')\r\n        console.log(chalk.yellow('\uD83D\uDD27 Git configuration needed:'))\r\n        console.log(chalk.gray('   Run these commands to configure Git:'))\r\n        console.log(chalk.cyan('   git config --global user.name \"Your Name\"'))\r\n        console.log(chalk.cyan('   git config --global user.email \"your@email.com\"'))\r\n      }\r\n      \r\n      // Add more auto-fixes as needed\r\n    }\r\n  }\r\n}", "import { Command } from 'commander'\r\nimport chalk from 'chalk'\r\nimport inquirer from 'inquirer'\r\nimport { getLogger } from '../../utils/logger'\r\nimport { MakeCommand } from './make'\r\nimport { NoteCommand } from './note'\r\nimport { RunCommand } from './run'\r\nimport { ListCommand } from './list'\r\nimport { AttachCommand } from './attach'\r\nimport { StopCommand } from './stop'\r\nimport { DeleteCommand } from './delete'\r\nimport { HealthCommand } from './health'\r\n\r\nexport class InteractiveCommand {\r\n  private logger = getLogger()\r\n\r\n  build(): Command {\r\n    return new Command('interactive')\r\n      .description('\uD83C\uDF00 Interactive Tazz CLI tool menu')\r\n      .alias('i')\r\n      .action(async () => {\r\n        await this.execute()\r\n      })\r\n  }\r\n\r\n  async execute(): Promise<void> {\r\n    console.clear()\r\n    this.showLogo()\r\n    \r\n    while (true) {\r\n      try {\r\n        const choice = await this.showMainMenu()\r\n        \r\n        if (choice === 'exit') {\r\n          console.log('')\r\n          console.log(chalk.cyan('\uD83D\uDC4B Thanks for using Tazz CLI Tool!'))\r\n          console.log('')\r\n          process.exit(0)\r\n        }\r\n        \r\n        await this.handleMenuChoice(choice)\r\n        \r\n        // Pause before showing menu again\r\n        console.log('')\r\n        await inquirer.prompt([{\r\n          type: 'input',\r\n          name: 'continue',\r\n          message: 'Press Enter to continue...'\r\n        }])\r\n        \r\n      } catch (error) {\r\n        if (error === 'SIGINT') {\r\n          console.log('')\r\n          console.log(chalk.cyan('\uD83D\uDC4B Goodbye!'))\r\n          process.exit(0)\r\n        }\r\n        \r\n        this.logger.error('Interactive menu error', error as Error)\r\n        console.log('')\r\n        console.log(chalk.red('\u274C An error occurred. Please try again.'))\r\n        console.log('')\r\n      }\r\n    }\r\n  }\r\n\r\n  private showLogo(): void {\r\n    const logo = `\r\n        .       *        .        *\r\n        .             .    *         .       .\r\n                   @@@\r\n                @@@@@@@\r\n              @@@@#^#@@@@\r\n                @@@@@@@\r\n                  @@@\r\n                   @@\r\n        ___@______________________\r\n .          *          .       *       .      .\r\n     *          .             *        .      *\r\n    `\r\n    \r\n    console.log(chalk.cyan(logo))\r\n    console.log(chalk.bold.cyan('=== Tazz CLI Tool ==='))\r\n    console.log(chalk.gray('   AI-Powered Development Orchestrator'))\r\n    console.log('')\r\n  }\r\n\r\n  private async showMainMenu(): Promise<string> {\r\n    const choices = [\r\n      {\r\n        name: `${chalk.cyan('\uD83C\uDFD7\uFE0F  make')} - Setup Tazz in current project`,\r\n        value: 'make',\r\n        short: 'make'\r\n      },\r\n      {\r\n        name: `${chalk.cyan('\uD83D\uDCDD note')} - Edit tasks and prompts`,\r\n        value: 'note',\r\n        short: 'note'\r\n      },\r\n      {\r\n        name: `${chalk.cyan('\uD83D\uDE80 run')} - Start development session`,\r\n        value: 'run',\r\n        short: 'run'\r\n      },\r\n      new inquirer.Separator(),\r\n      {\r\n        name: `${chalk.yellow('\uD83D\uDCCB list')} - Show all sessions`,\r\n        value: 'list',\r\n        short: 'list'\r\n      },\r\n      {\r\n        name: `${chalk.yellow('\uD83D\uDD17 join')} - Attach to session`,\r\n        value: 'join',\r\n        short: 'join'\r\n      },\r\n      {\r\n        name: `${chalk.yellow('\u23F8\uFE0F  stop')} - Stop session`,\r\n        value: 'stop',\r\n        short: 'stop'\r\n      },\r\n      {\r\n        name: `${chalk.red('\uD83D\uDDD1\uFE0F  destroy')} - Delete session`,\r\n        value: 'destroy',\r\n        short: 'destroy'\r\n      },\r\n      new inquirer.Separator(),\r\n      {\r\n        name: `${chalk.blue('\uD83C\uDFE5 health')} - System health check`,\r\n        value: 'health',\r\n        short: 'health'\r\n      },\r\n      {\r\n        name: `${chalk.blue('\uD83E\uDDF9 clean')} - Clean cache and temp files`,\r\n        value: 'clean',\r\n        short: 'clean'\r\n      },\r\n      new inquirer.Separator(),\r\n      {\r\n        name: `${chalk.gray('\u274C exit')} - Exit Tazz CLI`,\r\n        value: 'exit',\r\n        short: 'exit'\r\n      }\r\n    ]\r\n\r\n    const { action } = await inquirer.prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'action',\r\n        message: 'What would you like to do?',\r\n        choices,\r\n        pageSize: 15\r\n      }\r\n    ])\r\n\r\n    return action\r\n  }\r\n\r\n  private async handleMenuChoice(choice: string): Promise<void> {\r\n    console.log('')\r\n    \r\n    switch (choice) {\r\n      case 'make':\r\n        await this.handleMake()\r\n        break\r\n        \r\n      case 'note':\r\n        await this.handleNote()\r\n        break\r\n        \r\n      case 'run':\r\n        await this.handleRun()\r\n        break\r\n        \r\n      case 'list':\r\n        await this.handleList()\r\n        break\r\n        \r\n      case 'join':\r\n        await this.handleJoin()\r\n        break\r\n        \r\n      case 'stop':\r\n        await this.handleStop()\r\n        break\r\n        \r\n      case 'destroy':\r\n        await this.handleDestroy()\r\n        break\r\n        \r\n      case 'health':\r\n        await this.handleHealth()\r\n        break\r\n        \r\n      case 'clean':\r\n        await this.handleClean()\r\n        break\r\n        \r\n      default:\r\n        console.log(chalk.red('Unknown action'))\r\n    }\r\n  }\r\n\r\n  private async handleMake(): Promise<void> {\r\n    const makeCommand = new MakeCommand()\r\n    await makeCommand.execute()\r\n  }\r\n\r\n  private async handleNote(): Promise<void> {\r\n    const { editor, template } = await inquirer.prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'editor',\r\n        message: 'Choose editor:',\r\n        choices: [\r\n          { name: 'VS Code', value: 'code' },\r\n          { name: 'Vim', value: 'vim' },\r\n          { name: 'Nano', value: 'nano' },\r\n          { name: 'Emacs', value: 'emacs' }\r\n        ],\r\n        default: 'code'\r\n      },\r\n      {\r\n        type: 'list',\r\n        name: 'template',\r\n        message: 'Choose template:',\r\n        choices: [\r\n          { name: 'Task List', value: 'task' },\r\n          { name: 'Prompt Template', value: 'prompt' },\r\n          { name: 'Session Plan', value: 'session' }\r\n        ],\r\n        default: 'task'\r\n      }\r\n    ])\r\n\r\n    const noteCommand = new NoteCommand()\r\n    await noteCommand.execute({ editor, template })\r\n  }\r\n\r\n  private async handleRun(): Promise<void> {\r\n    const { sessionName, tasks, branch, tmux } = await inquirer.prompt([\r\n      {\r\n        type: 'input',\r\n        name: 'sessionName',\r\n        message: 'Session name:',\r\n        validate: (input: string) => {\r\n          if (!input.trim()) {\r\n            return 'Session name is required'\r\n          }\r\n          if (!/^[a-zA-Z0-9-_]+$/.test(input)) {\r\n            return 'Session name can only contain letters, numbers, hyphens, and underscores'\r\n          }\r\n          return true\r\n        }\r\n      },\r\n      {\r\n        type: 'input',\r\n        name: 'tasks',\r\n        message: 'Tasks (comma-separated, optional):'\r\n      },\r\n      {\r\n        type: 'input',\r\n        name: 'branch',\r\n        message: 'Custom branch name (optional):'\r\n      },\r\n      {\r\n        type: 'confirm',\r\n        name: 'tmux',\r\n        message: 'Create tmux session?',\r\n        default: true\r\n      }\r\n    ])\r\n\r\n    const runCommand = new RunCommand()\r\n    await runCommand.execute(sessionName, {\r\n      tasks: tasks || undefined,\r\n      branch: branch || undefined,\r\n      tmux\r\n    })\r\n  }\r\n\r\n  private async handleList(): Promise<void> {\r\n    const listCommand = new ListCommand()\r\n    await listCommand.execute()\r\n  }\r\n\r\n  private async handleJoin(): Promise<void> {\r\n    // First show available sessions\r\n    const listCommand = new ListCommand()\r\n    await listCommand.execute()\r\n\r\n    console.log('')\r\n    const { sessionId } = await inquirer.prompt([\r\n      {\r\n        type: 'input',\r\n        name: 'sessionId',\r\n        message: 'Enter session ID to join:',\r\n        validate: (input: string) => {\r\n          if (!input.trim()) {\r\n            return 'Session ID is required'\r\n          }\r\n          return true\r\n        }\r\n      }\r\n    ])\r\n\r\n    const attachCommand = new AttachCommand()\r\n    await attachCommand.execute(sessionId)\r\n  }\r\n\r\n  private async handleStop(): Promise<void> {\r\n    // First show available sessions\r\n    const listCommand = new ListCommand()\r\n    await listCommand.execute()\r\n\r\n    console.log('')\r\n    const { sessionId } = await inquirer.prompt([\r\n      {\r\n        type: 'input',\r\n        name: 'sessionId',\r\n        message: 'Enter session ID to stop:',\r\n        validate: (input: string) => {\r\n          if (!input.trim()) {\r\n            return 'Session ID is required'\r\n          }\r\n          return true\r\n        }\r\n      }\r\n    ])\r\n\r\n    const stopCommand = new StopCommand()\r\n    await stopCommand.execute(sessionId)\r\n  }\r\n\r\n  private async handleDestroy(): Promise<void> {\r\n    const { confirmAll } = await inquirer.prompt([\r\n      {\r\n        type: 'confirm',\r\n        name: 'confirmAll',\r\n        message: chalk.red('\u26A0\uFE0F  This will destroy ALL active sessions. Are you sure?'),\r\n        default: false\r\n      }\r\n    ])\r\n\r\n    if (!confirmAll) {\r\n      console.log(chalk.gray('Operation cancelled.'))\r\n      return\r\n    }\r\n\r\n    const { finalConfirm } = await inquirer.prompt([\r\n      {\r\n        type: 'input',\r\n        name: 'finalConfirm',\r\n        message: chalk.red('Type \"destroy\" to confirm:'),\r\n        validate: (input: string) => {\r\n          if (input !== 'destroy') {\r\n            return 'You must type \"destroy\" to confirm'\r\n          }\r\n          return true\r\n        }\r\n      }\r\n    ])\r\n\r\n    if (finalConfirm === 'destroy') {\r\n      console.log('')\r\n      console.log(chalk.yellow('\uD83D\uDDD1\uFE0F  Destroying all sessions...'))\r\n      \r\n      // TODO: Implement destroy all sessions\r\n      console.log(chalk.green('\u2705 All sessions destroyed'))\r\n    }\r\n  }\r\n\r\n  private async handleHealth(): Promise<void> {\r\n    const { fix, verbose } = await inquirer.prompt([\r\n      {\r\n        type: 'confirm',\r\n        name: 'fix',\r\n        message: 'Automatically fix issues where possible?',\r\n        default: true\r\n      },\r\n      {\r\n        type: 'confirm',\r\n        name: 'verbose',\r\n        message: 'Show detailed diagnostic information?',\r\n        default: false\r\n      }\r\n    ])\r\n\r\n    const healthCommand = new HealthCommand()\r\n    await healthCommand.execute({ fix, verbose })\r\n  }\r\n\r\n  private async handleClean(): Promise<void> {\r\n    const { confirmClean } = await inquirer.prompt([\r\n      {\r\n        type: 'confirm',\r\n        name: 'confirmClean',\r\n        message: 'Clean cache and temporary files?',\r\n        default: true\r\n      }\r\n    ])\r\n\r\n    if (confirmClean) {\r\n      console.log('')\r\n      console.log(chalk.yellow('\uD83E\uDDF9 Cleaning cache and temporary files...'))\r\n      \r\n      // TODO: Implement clean functionality\r\n      console.log(chalk.green('\u2705 Clean completed'))\r\n    } else {\r\n      console.log(chalk.gray('Clean cancelled.'))\r\n    }\r\n  }\r\n}", "import { JoinCommand } from './join'\r\n\r\n// AttachCommand is just an alias for JoinCommand since join already has 'attach' as alias\r\nexport class AttachCommand extends JoinCommand {}", "import { Command } from 'commander'\r\nimport chalk from 'chalk'\r\nimport ora from 'ora'\r\nimport { remove, pathExists, readdir, stat } from 'fs-extra'\r\nimport { join } from 'path'\r\nimport { exec } from 'child_process'\r\nimport { promisify } from 'util'\r\nimport { getLogger } from '../../utils/logger'\r\nimport { getTazzDir } from '../../utils/paths'\r\n\r\nconst execAsync = promisify(exec)\r\n\r\nexport class CleanCommand {\r\n  private logger = getLogger()\r\n\r\n  build(): Command {\r\n    return new Command('clean')\r\n      .description('\uD83E\uDDF9 Clean cache and temporary files')\r\n      .option('--deep', 'Deep clean including logs and configuration')\r\n      .option('--dry-run', 'Show what would be cleaned without actually cleaning')\r\n      .action(async (options) => {\r\n        await this.execute(options)\r\n      })\r\n  }\r\n\r\n  async execute(options: {\r\n    deep?: boolean\r\n    dryRun?: boolean\r\n  } = {}): Promise<void> {\r\n    console.log('')\r\n    console.log(chalk.bold.cyan('\uD83E\uDDF9 Tazz CLI Cleanup'))\r\n    console.log(chalk.gray('Cleaning cache and temporary files...'))\r\n    console.log('')\r\n\r\n    if (options.dryRun) {\r\n      console.log(chalk.yellow('\uD83D\uDD0D DRY RUN - showing what would be cleaned'))\r\n      console.log('')\r\n    }\r\n\r\n    const cleanupTasks = [\r\n      {\r\n        name: 'Temporary worktrees',\r\n        action: () => this.cleanTempWorktrees(options.dryRun)\r\n      },\r\n      {\r\n        name: 'Orphaned tmux sessions',\r\n        action: () => this.cleanOrphanedTmuxSessions(options.dryRun)\r\n      },\r\n      {\r\n        name: 'Old session data',\r\n        action: () => this.cleanOldSessionData(options.dryRun)\r\n      },\r\n      {\r\n        name: 'Cache files',\r\n        action: () => this.cleanCacheFiles(options.dryRun)\r\n      }\r\n    ]\r\n\r\n    if (options.deep) {\r\n      cleanupTasks.push(\r\n        {\r\n          name: 'Log files',\r\n          action: () => this.cleanLogFiles(options.dryRun)\r\n        },\r\n        {\r\n          name: 'Configuration backup',\r\n          action: () => this.cleanConfigBackups(options.dryRun)\r\n        }\r\n      )\r\n    }\r\n\r\n    let totalCleaned = 0\r\n    let totalSize = 0\r\n\r\n    for (const task of cleanupTasks) {\r\n      const spinner = ora(`Cleaning ${task.name}`).start()\r\n      \r\n      try {\r\n        const result = await task.action()\r\n        totalCleaned += result.count\r\n        totalSize += result.size\r\n        \r\n        if (result.count > 0) {\r\n          const sizeStr = this.formatSize(result.size)\r\n          spinner.succeed(`${task.name}: ${result.count} items (${sizeStr})`)\r\n        } else {\r\n          spinner.succeed(`${task.name}: already clean`)\r\n        }\r\n      } catch (error) {\r\n        spinner.fail(`${task.name}: ${(error as Error).message}`)\r\n        this.logger.error('Cleanup task failed', error as Error, { task: task.name })\r\n      }\r\n    }\r\n\r\n    // Summary\r\n    console.log('')\r\n    console.log(chalk.bold('\uD83E\uDDF9 Cleanup Summary:'))\r\n    console.log(chalk.green(`   Items cleaned: ${totalCleaned}`))\r\n    console.log(chalk.green(`   Space freed: ${this.formatSize(totalSize)}`))\r\n    \r\n    if (options.dryRun) {\r\n      console.log('')\r\n      console.log(chalk.yellow('Run without --dry-run to actually perform the cleanup'))\r\n    } else if (totalCleaned > 0) {\r\n      console.log('')\r\n      console.log(chalk.green('\u2705 Cleanup completed successfully!'))\r\n    }\r\n    console.log('')\r\n  }\r\n\r\n  private async cleanTempWorktrees(dryRun?: boolean): Promise<{ count: number; size: number }> {\r\n    const tazzDir = getTazzDir()\r\n    const tempDir = join(tazzDir, 'temp')\r\n    \r\n    if (!await pathExists(tempDir)) {\r\n      return { count: 0, size: 0 }\r\n    }\r\n\r\n    const items = await readdir(tempDir)\r\n    let count = 0\r\n    let size = 0\r\n\r\n    for (const item of items) {\r\n      const itemPath = join(tempDir, item)\r\n      try {\r\n        const stats = await stat(itemPath)\r\n        size += stats.size\r\n        \r\n        if (!dryRun) {\r\n          await remove(itemPath)\r\n        }\r\n        count++\r\n      } catch (error) {\r\n        // Item may have been already removed\r\n        this.logger.debug('Failed to clean temp item', error as Error, { item: itemPath })\r\n      }\r\n    }\r\n\r\n    return { count, size }\r\n  }\r\n\r\n  private async cleanOrphanedTmuxSessions(dryRun?: boolean): Promise<{ count: number; size: number }> {\r\n    try {\r\n      const { stdout } = await execAsync('tmux list-sessions -F \"#{session_name}\" 2>/dev/null || true')\r\n      const sessions = stdout.trim().split('\\n').filter(s => s.startsWith('tazz_'))\r\n      \r\n      // TODO: Check which sessions are actually orphaned\r\n      // For now, just count them\r\n      const orphanedSessions = sessions.filter(s => s.includes('orphaned')) // Placeholder logic\r\n      \r\n      let count = 0\r\n      for (const session of orphanedSessions) {\r\n        if (!dryRun) {\r\n          try {\r\n            await execAsync(`tmux kill-session -t ${session}`)\r\n            count++\r\n          } catch (error) {\r\n            // Session may have already been killed\r\n          }\r\n        } else {\r\n          count++\r\n        }\r\n      }\r\n\r\n      return { count, size: count * 1024 } // Estimate 1KB per session\r\n    } catch (error) {\r\n      // tmux not available or no sessions\r\n      return { count: 0, size: 0 }\r\n    }\r\n  }\r\n\r\n  private async cleanOldSessionData(dryRun?: boolean): Promise<{ count: number; size: number }> {\r\n    const tazzDir = getTazzDir()\r\n    const projectsDir = join(tazzDir, 'projects')\r\n    \r\n    if (!await pathExists(projectsDir)) {\r\n      return { count: 0, size: 0 }\r\n    }\r\n\r\n    const projects = await readdir(projectsDir)\r\n    let count = 0\r\n    let size = 0\r\n\r\n    const oneWeekAgo = Date.now() - (7 * 24 * 60 * 60 * 1000)\r\n\r\n    for (const project of projects) {\r\n      const projectPath = join(projectsDir, project)\r\n      const sessionsFile = join(projectPath, 'sessions.json')\r\n      \r\n      if (await pathExists(sessionsFile)) {\r\n        try {\r\n          const stats = await stat(sessionsFile)\r\n          \r\n          // Clean sessions older than a week\r\n          if (stats.mtime.getTime() < oneWeekAgo) {\r\n            size += stats.size\r\n            \r\n            if (!dryRun) {\r\n              await remove(projectPath)\r\n            }\r\n            count++\r\n          }\r\n        } catch (error) {\r\n          this.logger.debug('Failed to check session data', error as Error, { project })\r\n        }\r\n      }\r\n    }\r\n\r\n    return { count, size }\r\n  }\r\n\r\n  private async cleanCacheFiles(dryRun?: boolean): Promise<{ count: number; size: number }> {\r\n    const tazzDir = getTazzDir()\r\n    const cacheDir = join(tazzDir, 'cache')\r\n    \r\n    if (!await pathExists(cacheDir)) {\r\n      return { count: 0, size: 0 }\r\n    }\r\n\r\n    const items = await readdir(cacheDir)\r\n    let count = 0\r\n    let size = 0\r\n\r\n    for (const item of items) {\r\n      const itemPath = join(cacheDir, item)\r\n      try {\r\n        const stats = await stat(itemPath)\r\n        size += stats.size\r\n        \r\n        if (!dryRun) {\r\n          await remove(itemPath)\r\n        }\r\n        count++\r\n      } catch (error) {\r\n        this.logger.debug('Failed to clean cache item', error as Error, { item: itemPath })\r\n      }\r\n    }\r\n\r\n    return { count, size }\r\n  }\r\n\r\n  private async cleanLogFiles(dryRun?: boolean): Promise<{ count: number; size: number }> {\r\n    const tazzDir = getTazzDir()\r\n    const logsDir = join(tazzDir, 'logs')\r\n    \r\n    if (!await pathExists(logsDir)) {\r\n      return { count: 0, size: 0 }\r\n    }\r\n\r\n    const logFiles = await readdir(logsDir)\r\n    let count = 0\r\n    let size = 0\r\n\r\n    const oneMonthAgo = Date.now() - (30 * 24 * 60 * 60 * 1000)\r\n\r\n    for (const logFile of logFiles) {\r\n      const logPath = join(logsDir, logFile)\r\n      try {\r\n        const stats = await stat(logPath)\r\n        \r\n        // Keep recent logs, clean old ones\r\n        if (stats.mtime.getTime() < oneMonthAgo) {\r\n          size += stats.size\r\n          \r\n          if (!dryRun) {\r\n            await remove(logPath)\r\n          }\r\n          count++\r\n        }\r\n      } catch (error) {\r\n        this.logger.debug('Failed to clean log file', error as Error, { logFile })\r\n      }\r\n    }\r\n\r\n    return { count, size }\r\n  }\r\n\r\n  private async cleanConfigBackups(dryRun?: boolean): Promise<{ count: number; size: number }> {\r\n    const tazzDir = getTazzDir()\r\n    const backupDir = join(tazzDir, 'backups')\r\n    \r\n    if (!await pathExists(backupDir)) {\r\n      return { count: 0, size: 0 }\r\n    }\r\n\r\n    const backupFiles = await readdir(backupDir)\r\n    let count = 0\r\n    let size = 0\r\n\r\n    const twoWeeksAgo = Date.now() - (14 * 24 * 60 * 60 * 1000)\r\n\r\n    for (const backupFile of backupFiles) {\r\n      const backupPath = join(backupDir, backupFile)\r\n      try {\r\n        const stats = await stat(backupPath)\r\n        \r\n        // Keep recent backups, clean old ones\r\n        if (stats.mtime.getTime() < twoWeeksAgo) {\r\n          size += stats.size\r\n          \r\n          if (!dryRun) {\r\n            await remove(backupPath)\r\n          }\r\n          count++\r\n        }\r\n      } catch (error) {\r\n        this.logger.debug('Failed to clean backup file', error as Error, { backupFile })\r\n      }\r\n    }\r\n\r\n    return { count, size }\r\n  }\r\n\r\n  private formatSize(bytes: number): string {\r\n    if (bytes === 0) return '0 B'\r\n    \r\n    const sizes = ['B', 'KB', 'MB', 'GB']\r\n    const i = Math.floor(Math.log(bytes) / Math.log(1024))\r\n    \r\n    return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`\r\n  }\r\n}"],
  "mappings": "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",
  "names": ["import_commander", "import_chalk", "winston", "import_fs_extra", "import_path", "import_path", "util", "objectUtil", "errorUtil", "errorMap", "ctx", "result", "issues", "elements", "processed", "result", "r", "ZodFirstPartyTypeKind", "SessionStatus", "AgentType", "AgentStatus", "TaskStatus", "AgentCommandType", "ProjectType", "logger", "fsWriteFile", "import_fs_extra", "import_path", "logger", "import_fs_extra", "import_path", "logger", "chalk", "ora", "import_commander", "import_chalk", "import_fs_extra", "import_path", "chalk", "process", "import_commander", "import_chalk", "import_ora", "import_fs_extra", "import_path", "import_child_process", "import_util", "import_chalk", "chalk", "import_child_process", "import_util", "import_chalk", "import_ora", "chalk", "ora", "execAsync", "chalk", "ora", "spawn", "import_commander", "import_chalk", "import_child_process", "import_util", "execAsync", "chalk", "import_commander", "import_chalk", "import_child_process", "import_util", "execAsync", "chalk", "spawn", "import_commander", "import_chalk", "import_fs_extra", "import_path", "chalk", "import_commander", "import_chalk", "import_child_process", "import_util", "execAsync", "chalk", "inquirer", "import_commander", "import_chalk", "import_ora", "import_child_process", "import_util", "import_fs_extra", "execAsync", "chalk", "ora", "import_commander", "import_chalk", "import_inquirer", "chalk", "inquirer", "import_commander", "import_chalk", "import_ora", "import_fs_extra", "import_path", "import_child_process", "import_util", "execAsync", "chalk", "ora", "logger", "chalk"]
}
